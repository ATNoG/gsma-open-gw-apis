/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/one-time-password-sms/v1/send-code": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Send Code */
    post: operations["send_code_one_time_password_sms_v1_send_code_post"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/one-time-password-sms/v1/validate-code": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Send Code */
    post: operations["send_code_one_time_password_sms_v1_validate_code_post"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
}
export type webhooks = Record<string, never>;
export interface components {
  schemas: {
    /** HTTPValidationError */
    HTTPValidationError: {
      /** Detail */
      detail?: components["schemas"]["ValidationError"][];
    };
    /** SendCodeBody */
    SendCodeBody: {
      /**
       * Phonenumber
       * @description A public identifier addressing a telephone subscription. In mobile networks it corresponds to the MSISDN (Mobile Station International Subscriber Directory Number). In order to be globally unique it has to be formatted in international format, according to E.164 standard, prefixed with '+'.
       */
      phoneNumber: string;
      /**
       * Message
       * @description Message template used to compose the content of the SMS sent to the phone number. It must include the following label indicating where to include the short code `{{code}}`
       */
      message: string;
    };
    /** SendCodeResponse */
    SendCodeResponse: {
      /**
       * Authenticationid
       * @description unique id of the verification attempt the code belongs to.
       */
      authenticationId: string;
    };
    /** ValidateCodeBody */
    ValidateCodeBody: {
      /**
       * Authenticationid
       * @description unique id of the verification attempt the code belongs to.
       */
      authenticationId: string;
      /**
       * Code
       * @description temporal, short code to be validated
       */
      code: string;
    };
    /** ValidationError */
    ValidationError: {
      /** Location */
      loc: (string | number)[];
      /** Message */
      msg: string;
      /** Error Type */
      type: string;
    };
  };
  responses: never;
  parameters: {
    /** @description Correlation id for the different services */
    "x-correlator": string;
  };
  requestBodies: never;
  headers: {
    /** @description Correlation id for the different services */
    "x-correlator": string;
  };
  pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
  send_code_one_time_password_sms_v1_send_code_post: {
    parameters: {
      query?: never;
      header?: {
        /** @description Correlation id for the different services */
        "x-correlator"?: components["parameters"]["x-correlator"];
      };
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["SendCodeBody"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          "x-correlator": components["headers"]["x-correlator"];
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["SendCodeResponse"];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          "x-correlator": components["headers"]["x-correlator"];
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  send_code_one_time_password_sms_v1_validate_code_post: {
    parameters: {
      query?: never;
      header?: {
        /** @description Correlation id for the different services */
        "x-correlator"?: components["parameters"]["x-correlator"];
      };
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ValidateCodeBody"];
      };
    };
    responses: {
      /** @description Successful Response */
      204: {
        headers: {
          "x-correlator": components["headers"]["x-correlator"];
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Validation Error */
      422: {
        headers: {
          "x-correlator": components["headers"]["x-correlator"];
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
}
