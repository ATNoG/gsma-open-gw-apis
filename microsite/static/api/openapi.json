{
  "openapi": "3.1.0",
  "info": { "title": "GSMA Open Gateway", "version": "0.1.0" },
  "paths": {
    "/health": {
      "get": {
        "tags": ["Management"],
        "summary": "Get Health",
        "operationId": "get_health_health_get",
        "responses": {
          "204": {
            "description": "Successful Response",
            "headers": {
              "x-correlator": { "$ref": "#/components/headers/x-correlator" }
            }
          }
        },
        "parameters": [{ "$ref": "#/components/parameters/x-correlator" }]
      }
    },
    "/one-time-password-sms/v1/send-code": {
      "post": {
        "tags": ["SMS OTP"],
        "summary": "Send Code",
        "operationId": "send_code_one_time_password_sms_v1_send_code_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/SendCodeBody" }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/SendCodeResponse" }
              }
            },
            "headers": {
              "x-correlator": { "$ref": "#/components/headers/x-correlator" }
            }
          },
          "400": {
            "description": "Problem with the client request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorInfo" }
              }
            },
            "headers": {
              "x-correlator": { "$ref": "#/components/headers/x-correlator" }
            }
          }
        },
        "parameters": [{ "$ref": "#/components/parameters/x-correlator" }]
      }
    },
    "/one-time-password-sms/v1/validate-code": {
      "post": {
        "tags": ["SMS OTP"],
        "summary": "Validate Code",
        "operationId": "send_code_one_time_password_sms_v1_validate_code_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/ValidateCodeBody" }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "Successful Response",
            "headers": {
              "x-correlator": { "$ref": "#/components/headers/x-correlator" }
            }
          },
          "400": {
            "description": "Problem with the client request. In addition to regular scenario of `INVALID_ARGUMENT`, another scenarios may exist:\n  - Too many unsuccessful attempts (`{\"code\": \"ONE_TIME_PASSWORD_SMS.VERIFICATION_FAILED\",\"message\": \"The maximum number of attempts for this authenticationId was exceeded without providing a valid OTP\"}`)\n  - Expired authenticationId (`{\"code\": \"ONE_TIME_PASSWORD_SMS.VERIFICATION_EXPIRED\",\"message\": \"The authenticationId is no longer valid\"}`)\n  - OTP is not valid for the provided authenticationId (`{\"code\": \"ONE_TIME_PASSWORD_SMS.INVALID_OTP\",\"message\": \"The provided OTP is not valid for this authenticationId\"}`)\n        ",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorInfo" }
              }
            },
            "headers": {
              "x-correlator": { "$ref": "#/components/headers/x-correlator" }
            }
          }
        },
        "parameters": [{ "$ref": "#/components/parameters/x-correlator" }]
      }
    },
    "/qos-profiles/v1/retrieve-qos-profiles": {
      "post": {
        "tags": ["QoS Profiles"],
        "summary": "Retrieve Qos Profiles",
        "operationId": "retrieve_qos_profiles_qos_profiles_v1_retrieve_qos_profiles_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/QosProfileDeviceRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "items": { "$ref": "#/components/schemas/QosProfile" },
                  "type": "array",
                  "title": "Response Retrieve Qos Profiles Qos Profiles V1 Retrieve Qos Profiles Post"
                }
              }
            },
            "headers": {
              "x-correlator": { "$ref": "#/components/headers/x-correlator" }
            }
          },
          "400": {
            "description": "Problem with the client request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorInfo" }
              }
            },
            "headers": {
              "x-correlator": { "$ref": "#/components/headers/x-correlator" }
            }
          }
        },
        "parameters": [{ "$ref": "#/components/parameters/x-correlator" }]
      }
    },
    "/qos-profiles/v1/qos-profiles/{name}": {
      "get": {
        "tags": ["QoS Profiles"],
        "summary": "Retrieve Qos Profile By Name",
        "operationId": "retrieve_qos_profile_by_name_qos_profiles_v1_qos_profiles__name__get",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "title": "Name" }
          },
          { "$ref": "#/components/parameters/x-correlator" }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/QosProfile" }
              }
            },
            "headers": {
              "x-correlator": { "$ref": "#/components/headers/x-correlator" }
            }
          },
          "400": {
            "description": "Problem with the client request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorInfo" }
              }
            },
            "headers": {
              "x-correlator": { "$ref": "#/components/headers/x-correlator" }
            }
          }
        }
      }
    },
    "/location-retrieval/v0.4/retrieve": {
      "post": {
        "tags": ["Location"],
        "summary": "Retrieve Location",
        "operationId": "retrieve_location_location_retrieval_v0_4_retrieve_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RetrievalLocationRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Location" }
              }
            },
            "headers": {
              "x-correlator": { "$ref": "#/components/headers/x-correlator" }
            }
          },
          "400": {
            "description": "Problem with the client request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorInfo" }
              }
            },
            "headers": {
              "x-correlator": { "$ref": "#/components/headers/x-correlator" }
            }
          }
        },
        "parameters": [{ "$ref": "#/components/parameters/x-correlator" }]
      }
    },
    "/location-verification/v2/verify": {
      "post": {
        "tags": ["Location"],
        "summary": "Verify Location",
        "operationId": "retrieve_location_location_verification_v2_verify_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/VerifyLocationRequest" }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VerifyLocationResponse"
                }
              }
            },
            "headers": {
              "x-correlator": { "$ref": "#/components/headers/x-correlator" }
            }
          },
          "400": {
            "description": "Problem with the client request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorInfo" }
              }
            },
            "headers": {
              "x-correlator": { "$ref": "#/components/headers/x-correlator" }
            }
          }
        },
        "parameters": [{ "$ref": "#/components/parameters/x-correlator" }]
      }
    },
    "/qod-provisioning/v0.2/device-qos": {
      "post": {
        "tags": ["QoD Provisioning"],
        "summary": "Create Provisioning",
        "operationId": "create_provisioning_qod_provisioning_v0_2_device_qos_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/TriggerProvisioning" }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ProvisioningInfo" }
              }
            },
            "headers": {
              "x-correlator": { "$ref": "#/components/headers/x-correlator" }
            }
          },
          "400": {
            "description": "Problem with the client request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorInfo" }
              }
            },
            "headers": {
              "x-correlator": { "$ref": "#/components/headers/x-correlator" }
            }
          }
        },
        "parameters": [{ "$ref": "#/components/parameters/x-correlator" }]
      }
    },
    "/qod-provisioning/v0.2/device-qos/{provisioningId}": {
      "get": {
        "tags": ["QoD Provisioning"],
        "summary": "Get Qod Information By Id",
        "operationId": "get_qod_information_by_id_qod_provisioning_v0_2_device_qos__provisioningId__get",
        "parameters": [
          {
            "name": "provisioningId",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "title": "Provisioningid" }
          },
          { "$ref": "#/components/parameters/x-correlator" }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ProvisioningInfo" }
              }
            },
            "headers": {
              "x-correlator": { "$ref": "#/components/headers/x-correlator" }
            }
          },
          "400": {
            "description": "Problem with the client request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorInfo" }
              }
            },
            "headers": {
              "x-correlator": { "$ref": "#/components/headers/x-correlator" }
            }
          }
        }
      },
      "delete": {
        "tags": ["QoD Provisioning"],
        "summary": "Delete Qod",
        "operationId": "delete_qod_qod_provisioning_v0_2_device_qos__provisioningId__delete",
        "parameters": [
          {
            "name": "provisioningId",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "title": "Provisioningid" }
          },
          { "$ref": "#/components/parameters/x-correlator" }
        ],
        "responses": {
          "204": {
            "description": "Successful Response",
            "headers": {
              "x-correlator": { "$ref": "#/components/headers/x-correlator" }
            }
          },
          "400": {
            "description": "Problem with the client request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorInfo" }
              }
            },
            "headers": {
              "x-correlator": { "$ref": "#/components/headers/x-correlator" }
            }
          }
        }
      }
    },
    "/qod-provisioning/v0.2/retrieve-device-qos": {
      "post": {
        "tags": ["QoD Provisioning"],
        "summary": "Retrieve Device QoS",
        "operationId": "get_qod_information_by_id_qod_provisioning_v0_2_retrieve_device_qos_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RetrieveProvisioningByDevice"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ProvisioningInfo" }
              }
            },
            "headers": {
              "x-correlator": { "$ref": "#/components/headers/x-correlator" }
            }
          },
          "400": {
            "description": "Problem with the client request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorInfo" }
              }
            },
            "headers": {
              "x-correlator": { "$ref": "#/components/headers/x-correlator" }
            }
          }
        },
        "parameters": [{ "$ref": "#/components/parameters/x-correlator" }]
      }
    },
    "/quality-on-demand/v1/sessions": {
      "post": {
        "tags": ["Quality On Demand"],
        "summary": "Create Session",
        "operationId": "create_session_quality_on_demand_v1_sessions_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/CreateSession" }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/SessionInfo" }
              }
            },
            "headers": {
              "x-correlator": { "$ref": "#/components/headers/x-correlator" }
            }
          },
          "400": {
            "description": "Problem with the client request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorInfo" }
              }
            },
            "headers": {
              "x-correlator": { "$ref": "#/components/headers/x-correlator" }
            }
          }
        },
        "parameters": [{ "$ref": "#/components/parameters/x-correlator" }]
      }
    },
    "/quality-on-demand/v1/sessions/{sessionId}": {
      "get": {
        "tags": ["Quality On Demand"],
        "summary": "Get QoD Session Information By Id",
        "operationId": "get_qod_information_by_id_quality_on_demand_v1_sessions__sessionId__get",
        "parameters": [
          {
            "name": "sessionId",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "title": "Sessionid" }
          },
          { "$ref": "#/components/parameters/x-correlator" }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/SessionInfo" }
              }
            },
            "headers": {
              "x-correlator": { "$ref": "#/components/headers/x-correlator" }
            }
          },
          "400": {
            "description": "Problem with the client request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorInfo" }
              }
            },
            "headers": {
              "x-correlator": { "$ref": "#/components/headers/x-correlator" }
            }
          }
        }
      },
      "delete": {
        "tags": ["Quality On Demand"],
        "summary": "Delete QoD Session",
        "operationId": "delete_qod_quality_on_demand_v1_sessions__sessionId__delete",
        "parameters": [
          {
            "name": "sessionId",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "title": "Sessionid" }
          },
          { "$ref": "#/components/parameters/x-correlator" }
        ],
        "responses": {
          "204": {
            "description": "Successful Response",
            "headers": {
              "x-correlator": { "$ref": "#/components/headers/x-correlator" }
            }
          },
          "400": {
            "description": "Problem with the client request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorInfo" }
              }
            },
            "headers": {
              "x-correlator": { "$ref": "#/components/headers/x-correlator" }
            }
          }
        }
      }
    },
    "/quality-on-demand/v1/sessions/{sessionId}/extend": {
      "post": {
        "tags": ["Quality On Demand"],
        "summary": "Extend Session Duration",
        "operationId": "extend_session_duration_quality_on_demand_v1_sessions__sessionId__extend_post",
        "parameters": [
          {
            "name": "sessionId",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "title": "Sessionid" }
          },
          { "$ref": "#/components/parameters/x-correlator" }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/ExtendSessionDuration" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/SessionInfo" }
              }
            },
            "headers": {
              "x-correlator": { "$ref": "#/components/headers/x-correlator" }
            }
          },
          "400": {
            "description": "Problem with the client request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorInfo" }
              }
            },
            "headers": {
              "x-correlator": { "$ref": "#/components/headers/x-correlator" }
            }
          }
        }
      }
    },
    "/quality-on-demand/v1/retrieve-sessions": {
      "post": {
        "tags": ["Quality On Demand"],
        "summary": "Retrieve Device Sessions",
        "operationId": "get_qod_information_by_device_quality_on_demand_v1_retrieve_sessions_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/RetrieveSessionsInput" }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "items": { "$ref": "#/components/schemas/SessionInfo" },
                  "type": "array",
                  "title": "Response Get Qod Information By Device Quality On Demand V1 Retrieve Sessions Post"
                }
              }
            },
            "headers": {
              "x-correlator": { "$ref": "#/components/headers/x-correlator" }
            }
          },
          "400": {
            "description": "Problem with the client request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorInfo" }
              }
            },
            "headers": {
              "x-correlator": { "$ref": "#/components/headers/x-correlator" }
            }
          }
        },
        "parameters": [{ "$ref": "#/components/parameters/x-correlator" }]
      }
    },
    "/geofencing-subscriptions/v0.4/subscriptions": {
      "get": {
        "tags": ["Geofencing Subscriptions"],
        "summary": "Get Subscription",
        "operationId": "get_subscription_geofencing_subscriptions_v0_4_subscriptions_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/Subscription_SubscriptionEventType_SubscriptionDetail_"
                  },
                  "type": "array",
                  "title": "Response Get Subscription Geofencing Subscriptions V0 4 Subscriptions Get"
                }
              }
            },
            "headers": {
              "x-correlator": { "$ref": "#/components/headers/x-correlator" }
            }
          },
          "400": {
            "description": "Problem with the client request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorInfo" }
              }
            },
            "headers": {
              "x-correlator": { "$ref": "#/components/headers/x-correlator" }
            }
          }
        },
        "parameters": [{ "$ref": "#/components/parameters/x-correlator" }]
      },
      "post": {
        "tags": ["Geofencing Subscriptions"],
        "summary": "Post Subscriptions",
        "operationId": "post_subscriptions_geofencing_subscriptions_v0_4_subscriptions_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SubscriptionRequest_SubscriptionEventType_SubscriptionDetail_"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Subscription_SubscriptionEventType_SubscriptionDetail_"
                }
              }
            },
            "headers": {
              "x-correlator": { "$ref": "#/components/headers/x-correlator" }
            }
          },
          "400": {
            "description": "Problem with the client request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorInfo" }
              }
            },
            "headers": {
              "x-correlator": { "$ref": "#/components/headers/x-correlator" }
            }
          }
        },
        "parameters": [{ "$ref": "#/components/parameters/x-correlator" }]
      }
    },
    "/geofencing-subscriptions/v0.4/subscriptions/{subscriptionId}": {
      "get": {
        "tags": ["Geofencing Subscriptions"],
        "summary": "Get Subscriptions By Id",
        "operationId": "get_subscriptions_by_id_geofencing_subscriptions_v0_4_subscriptions__subscriptionId__get",
        "parameters": [
          {
            "name": "subscriptionId",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "title": "Subscriptionid" }
          },
          { "$ref": "#/components/parameters/x-correlator" }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Subscription_SubscriptionEventType_SubscriptionDetail_"
                }
              }
            },
            "headers": {
              "x-correlator": { "$ref": "#/components/headers/x-correlator" }
            }
          },
          "400": {
            "description": "Problem with the client request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorInfo" }
              }
            },
            "headers": {
              "x-correlator": { "$ref": "#/components/headers/x-correlator" }
            }
          }
        }
      },
      "delete": {
        "tags": ["Geofencing Subscriptions"],
        "summary": "Delete Subscriptions By Id",
        "operationId": "delete_subscriptions_by_id_geofencing_subscriptions_v0_4_subscriptions__subscriptionId__delete",
        "parameters": [
          {
            "name": "subscriptionId",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "title": "Subscriptionid" }
          },
          { "$ref": "#/components/parameters/x-correlator" }
        ],
        "responses": {
          "204": {
            "description": "Successful Response",
            "headers": {
              "x-correlator": { "$ref": "#/components/headers/x-correlator" }
            }
          },
          "400": {
            "description": "Problem with the client request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorInfo" }
              }
            },
            "headers": {
              "x-correlator": { "$ref": "#/components/headers/x-correlator" }
            }
          }
        }
      }
    },
    "/device-reachability-status/v1/retrieve": {
      "post": {
        "tags": ["Device Reachability Status"],
        "summary": "Retrieve Reachability Status",
        "operationId": "retrieve_reachability_status_device_reachability_status_v1_retrieve_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RequestReachabilityStatus"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReachabilityStatusResponse"
                }
              }
            },
            "headers": {
              "x-correlator": { "$ref": "#/components/headers/x-correlator" }
            }
          },
          "400": {
            "description": "Problem with the client request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorInfo" }
              }
            },
            "headers": {
              "x-correlator": { "$ref": "#/components/headers/x-correlator" }
            }
          }
        },
        "parameters": [{ "$ref": "#/components/parameters/x-correlator" }]
      }
    },
    "/device-reachability-status-subscriptions/v0.7/subscriptions": {
      "get": {
        "tags": ["Device Reachability Status"],
        "summary": "Get Subscription",
        "operationId": "get_subscription_device_reachability_status_subscriptions_v0_7_subscriptions_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/app__schemas__subscriptions__Subscription_SubscriptionEventType_CreateSubscriptionDetail___1"
                  },
                  "type": "array",
                  "title": "Response Get Subscription Device Reachability Status Subscriptions V0 7 Subscriptions Get"
                }
              }
            },
            "headers": {
              "x-correlator": { "$ref": "#/components/headers/x-correlator" }
            }
          },
          "400": {
            "description": "Problem with the client request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorInfo" }
              }
            },
            "headers": {
              "x-correlator": { "$ref": "#/components/headers/x-correlator" }
            }
          }
        },
        "parameters": [{ "$ref": "#/components/parameters/x-correlator" }]
      },
      "post": {
        "tags": ["Device Reachability Status"],
        "summary": "Post Subscriptions",
        "operationId": "post_subscriptions_device_reachability_status_subscriptions_v0_7_subscriptions_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/app__schemas__subscriptions__SubscriptionRequest_SubscriptionEventType_CreateSubscriptionDetail___1"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/app__schemas__subscriptions__Subscription_SubscriptionEventType_CreateSubscriptionDetail___1"
                }
              }
            },
            "headers": {
              "x-correlator": { "$ref": "#/components/headers/x-correlator" }
            }
          },
          "400": {
            "description": "Problem with the client request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorInfo" }
              }
            },
            "headers": {
              "x-correlator": { "$ref": "#/components/headers/x-correlator" }
            }
          }
        },
        "parameters": [{ "$ref": "#/components/parameters/x-correlator" }]
      }
    },
    "/device-reachability-status-subscriptions/v0.7/subscriptions/{subscriptionId}": {
      "get": {
        "tags": ["Device Reachability Status"],
        "summary": "Get Subscriptions By Id",
        "operationId": "get_subscriptions_by_id_device_reachability_status_subscriptions_v0_7_subscriptions__subscriptionId__get",
        "parameters": [
          {
            "name": "subscriptionId",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "title": "Subscriptionid" }
          },
          { "$ref": "#/components/parameters/x-correlator" }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/app__schemas__subscriptions__Subscription_SubscriptionEventType_CreateSubscriptionDetail___1"
                }
              }
            },
            "headers": {
              "x-correlator": { "$ref": "#/components/headers/x-correlator" }
            }
          },
          "400": {
            "description": "Problem with the client request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorInfo" }
              }
            },
            "headers": {
              "x-correlator": { "$ref": "#/components/headers/x-correlator" }
            }
          }
        }
      },
      "delete": {
        "tags": ["Device Reachability Status"],
        "summary": "Delete Subscriptions By Id",
        "operationId": "delete_subscriptions_by_id_device_reachability_status_subscriptions_v0_7_subscriptions__subscriptionId__delete",
        "parameters": [
          {
            "name": "subscriptionId",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "title": "Subscriptionid" }
          },
          { "$ref": "#/components/parameters/x-correlator" }
        ],
        "responses": {
          "204": {
            "description": "Successful Response",
            "headers": {
              "x-correlator": { "$ref": "#/components/headers/x-correlator" }
            }
          },
          "400": {
            "description": "Problem with the client request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorInfo" }
              }
            },
            "headers": {
              "x-correlator": { "$ref": "#/components/headers/x-correlator" }
            }
          }
        }
      }
    },
    "/device-roaming-status/v1/retrieve": {
      "post": {
        "tags": ["Device Roaming Status"],
        "summary": "Retrieve Roaming Status",
        "operationId": "retrieve_roaming_status_device_roaming_status_v1_retrieve_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/RoamingStatusRequest" }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RoamingStatusResponse"
                }
              }
            },
            "headers": {
              "x-correlator": { "$ref": "#/components/headers/x-correlator" }
            }
          },
          "400": {
            "description": "Problem with the client request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorInfo" }
              }
            },
            "headers": {
              "x-correlator": { "$ref": "#/components/headers/x-correlator" }
            }
          }
        },
        "parameters": [{ "$ref": "#/components/parameters/x-correlator" }]
      }
    },
    "/device-roaming-status-subscriptions/v0.7/subscriptions": {
      "get": {
        "tags": ["Device Roaming Status"],
        "summary": "Get Subscription",
        "operationId": "get_subscription_device_roaming_status_subscriptions_v0_7_subscriptions_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/app__schemas__subscriptions__Subscription_SubscriptionEventType_CreateSubscriptionDetail___2"
                  },
                  "type": "array",
                  "title": "Response Get Subscription Device Roaming Status Subscriptions V0 7 Subscriptions Get"
                }
              }
            },
            "headers": {
              "x-correlator": { "$ref": "#/components/headers/x-correlator" }
            }
          },
          "400": {
            "description": "Problem with the client request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorInfo" }
              }
            },
            "headers": {
              "x-correlator": { "$ref": "#/components/headers/x-correlator" }
            }
          }
        },
        "parameters": [{ "$ref": "#/components/parameters/x-correlator" }]
      },
      "post": {
        "tags": ["Device Roaming Status"],
        "summary": "Post Subscriptions",
        "operationId": "post_subscriptions_device_roaming_status_subscriptions_v0_7_subscriptions_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/app__schemas__subscriptions__SubscriptionRequest_SubscriptionEventType_CreateSubscriptionDetail___2"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/app__schemas__subscriptions__Subscription_SubscriptionEventType_CreateSubscriptionDetail___2"
                }
              }
            },
            "headers": {
              "x-correlator": { "$ref": "#/components/headers/x-correlator" }
            }
          },
          "400": {
            "description": "Problem with the client request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorInfo" }
              }
            },
            "headers": {
              "x-correlator": { "$ref": "#/components/headers/x-correlator" }
            }
          }
        },
        "parameters": [{ "$ref": "#/components/parameters/x-correlator" }]
      }
    },
    "/device-roaming-status-subscriptions/v0.7/subscriptions/{subscriptionId}": {
      "get": {
        "tags": ["Device Roaming Status"],
        "summary": "Get Subscriptions By Id",
        "operationId": "get_subscriptions_by_id_device_roaming_status_subscriptions_v0_7_subscriptions__subscriptionId__get",
        "parameters": [
          {
            "name": "subscriptionId",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "title": "Subscriptionid" }
          },
          { "$ref": "#/components/parameters/x-correlator" }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/app__schemas__subscriptions__Subscription_SubscriptionEventType_CreateSubscriptionDetail___2"
                }
              }
            },
            "headers": {
              "x-correlator": { "$ref": "#/components/headers/x-correlator" }
            }
          },
          "400": {
            "description": "Problem with the client request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorInfo" }
              }
            },
            "headers": {
              "x-correlator": { "$ref": "#/components/headers/x-correlator" }
            }
          }
        }
      },
      "delete": {
        "tags": ["Device Roaming Status"],
        "summary": "Delete Subscriptions By Id",
        "operationId": "delete_subscriptions_by_id_device_roaming_status_subscriptions_v0_7_subscriptions__subscriptionId__delete",
        "parameters": [
          {
            "name": "subscriptionId",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "title": "Subscriptionid" }
          },
          { "$ref": "#/components/parameters/x-correlator" }
        ],
        "responses": {
          "204": {
            "description": "Successful Response",
            "headers": {
              "x-correlator": { "$ref": "#/components/headers/x-correlator" }
            }
          },
          "400": {
            "description": "Problem with the client request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorInfo" }
              }
            },
            "headers": {
              "x-correlator": { "$ref": "#/components/headers/x-correlator" }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "AMQPSettings": {
        "properties": {
          "address": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Address"
          },
          "linkName": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Linkname"
          },
          "senderSettlementMode": {
            "anyOf": [
              { "$ref": "#/components/schemas/SenderSettlementMode" },
              { "type": "null" }
            ]
          },
          "linkProperties": {
            "anyOf": [
              {
                "additionalProperties": { "type": "string" },
                "type": "object"
              },
              { "type": "null" }
            ],
            "title": "Linkproperties"
          }
        },
        "type": "object",
        "title": "AMQPSettings"
      },
      "AMQPSubscriptionRequest_SubscriptionEventType_SubscriptionDetail_": {
        "properties": {
          "sink": {
            "type": "string",
            "title": "Sink",
            "description": "The address to which events shall be delivered using the selected protocol.",
            "examples": ["https://endpoint.example.com/sink"]
          },
          "sinkCredential": {
            "anyOf": [
              { "$ref": "#/components/schemas/SinkCredential" },
              { "type": "null" }
            ]
          },
          "types": {
            "items": {
              "$ref": "#/components/schemas/app__schemas__geofencing__SubscriptionEventType"
            },
            "type": "array",
            "maxItems": 1,
            "minItems": 1,
            "title": "Types",
            "description": "Camara Event types which are eligible to be delivered by this subscription.\nNote: As of now we enforce to have only event type per subscription."
          },
          "config": {
            "$ref": "#/components/schemas/SubscriptionConfig_SubscriptionDetail_-Input"
          },
          "protocol": {
            "type": "string",
            "const": "AMQP",
            "title": "Protocol"
          },
          "protocolSettings": {
            "anyOf": [
              { "$ref": "#/components/schemas/AMQPSettings" },
              { "type": "null" }
            ]
          }
        },
        "type": "object",
        "required": ["sink", "types", "config", "protocol"],
        "title": "AMQPSubscriptionRequest[SubscriptionEventType, SubscriptionDetail]"
      },
      "AMQPSubscriptionResponse_SubscriptionEventType_SubscriptionDetail_": {
        "properties": {
          "sink": {
            "type": "string",
            "title": "Sink",
            "description": "The address to which events shall be delivered using the selected protocol.",
            "examples": ["https://endpoint.example.com/sink"]
          },
          "sinkCredential": {
            "anyOf": [
              { "$ref": "#/components/schemas/SinkCredential" },
              { "type": "null" }
            ]
          },
          "types": {
            "items": {
              "$ref": "#/components/schemas/app__schemas__geofencing__SubscriptionEventType"
            },
            "type": "array",
            "title": "Types",
            "description": "Camara Event types eligible to be delivered by this subscription.\n"
          },
          "config": {
            "$ref": "#/components/schemas/SubscriptionConfig_SubscriptionDetail_-Output"
          },
          "id": {
            "type": "string",
            "title": "Id",
            "description": "The unique identifier of the subscription in the scope of the subscription manager. When this information is contained within an event notification, this concept SHALL be referred as `subscriptionId` as per [Commonalities Event Notification Model](https://github.com/camaraproject/Commonalities/blob/main/documentation/API-design-guidelines.md#122-event-notification).",
            "examples": ["qs15-h556-rt89-1298"]
          },
          "startsAt": {
            "type": "string",
            "format": "date-time",
            "title": "Startsat",
            "description": "Date when the event subscription will begin/began."
          },
          "expiresAt": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time",
                "description": "Date when the event subscription will expire. Only provided when `subscriptionExpireTime` is indicated by API client or Telco Operator has a specific policy about that."
              },
              { "type": "null" }
            ],
            "title": "Expiresat"
          },
          "status": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/SubscriptionStatus",
                "description": "Current status of the subscription - Management of Subscription State engine is not mandatory for now. Note not all statuses may be considered to be implemented. Details:\n  - `ACTIVATION_REQUESTED`: Subscription creation (POST) is triggered but subscription creation process is not finished yet.\n  - `ACTIVE`: Subscription creation process is completed. Subscription is fully operative.\n  - `INACTIVE`: Subscription is temporarily inactive, but its workflow logic is not deleted.\n  - `EXPIRED`: Subscription is ended (no longer active). This status applies when subscription is ended due to `SUBSCRIPTION_EXPIRED` or `ACCESS_TOKEN_EXPIRED` event.\n  - `DELETED`: Subscription is ended as deleted (no longer active). This status applies when subscription information is kept (i.e. subscription workflow is no longer active but its meta-information is kept)."
              },
              { "type": "null" }
            ]
          },
          "protocol": {
            "type": "string",
            "const": "AMQP",
            "title": "Protocol"
          },
          "protocolSettings": {
            "anyOf": [
              { "$ref": "#/components/schemas/AMQPSettings" },
              { "type": "null" }
            ]
          }
        },
        "type": "object",
        "required": ["sink", "types", "config", "id", "startsAt", "protocol"],
        "title": "AMQPSubscriptionResponse[SubscriptionEventType, SubscriptionDetail]"
      },
      "ApacheKafkaSettings": {
        "properties": {
          "topicName": { "type": "string", "title": "Topicname" },
          "partitionKeyExtractor": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Partitionkeyextractor"
          },
          "clientId": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Clientid"
          },
          "ackMode": {
            "anyOf": [{ "type": "integer" }, { "type": "null" }],
            "title": "Ackmode"
          }
        },
        "type": "object",
        "required": ["topicName"],
        "title": "ApacheKafkaSettings"
      },
      "ApacheKafkaSubscriptionRequest_SubscriptionEventType_SubscriptionDetail_": {
        "properties": {
          "sink": {
            "type": "string",
            "title": "Sink",
            "description": "The address to which events shall be delivered using the selected protocol.",
            "examples": ["https://endpoint.example.com/sink"]
          },
          "sinkCredential": {
            "anyOf": [
              { "$ref": "#/components/schemas/SinkCredential" },
              { "type": "null" }
            ]
          },
          "types": {
            "items": {
              "$ref": "#/components/schemas/app__schemas__geofencing__SubscriptionEventType"
            },
            "type": "array",
            "maxItems": 1,
            "minItems": 1,
            "title": "Types",
            "description": "Camara Event types which are eligible to be delivered by this subscription.\nNote: As of now we enforce to have only event type per subscription."
          },
          "config": {
            "$ref": "#/components/schemas/SubscriptionConfig_SubscriptionDetail_-Input"
          },
          "protocol": {
            "type": "string",
            "const": "KAFKA",
            "title": "Protocol"
          },
          "protocolSettings": {
            "anyOf": [
              { "$ref": "#/components/schemas/ApacheKafkaSettings" },
              { "type": "null" }
            ]
          }
        },
        "type": "object",
        "required": ["sink", "types", "config", "protocol"],
        "title": "ApacheKafkaSubscriptionRequest[SubscriptionEventType, SubscriptionDetail]"
      },
      "ApacheKafkaSubscriptionResponse_SubscriptionEventType_SubscriptionDetail_": {
        "properties": {
          "sink": {
            "type": "string",
            "title": "Sink",
            "description": "The address to which events shall be delivered using the selected protocol.",
            "examples": ["https://endpoint.example.com/sink"]
          },
          "sinkCredential": {
            "anyOf": [
              { "$ref": "#/components/schemas/SinkCredential" },
              { "type": "null" }
            ]
          },
          "types": {
            "items": {
              "$ref": "#/components/schemas/app__schemas__geofencing__SubscriptionEventType"
            },
            "type": "array",
            "title": "Types",
            "description": "Camara Event types eligible to be delivered by this subscription.\n"
          },
          "config": {
            "$ref": "#/components/schemas/SubscriptionConfig_SubscriptionDetail_-Output"
          },
          "id": {
            "type": "string",
            "title": "Id",
            "description": "The unique identifier of the subscription in the scope of the subscription manager. When this information is contained within an event notification, this concept SHALL be referred as `subscriptionId` as per [Commonalities Event Notification Model](https://github.com/camaraproject/Commonalities/blob/main/documentation/API-design-guidelines.md#122-event-notification).",
            "examples": ["qs15-h556-rt89-1298"]
          },
          "startsAt": {
            "type": "string",
            "format": "date-time",
            "title": "Startsat",
            "description": "Date when the event subscription will begin/began."
          },
          "expiresAt": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time",
                "description": "Date when the event subscription will expire. Only provided when `subscriptionExpireTime` is indicated by API client or Telco Operator has a specific policy about that."
              },
              { "type": "null" }
            ],
            "title": "Expiresat"
          },
          "status": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/SubscriptionStatus",
                "description": "Current status of the subscription - Management of Subscription State engine is not mandatory for now. Note not all statuses may be considered to be implemented. Details:\n  - `ACTIVATION_REQUESTED`: Subscription creation (POST) is triggered but subscription creation process is not finished yet.\n  - `ACTIVE`: Subscription creation process is completed. Subscription is fully operative.\n  - `INACTIVE`: Subscription is temporarily inactive, but its workflow logic is not deleted.\n  - `EXPIRED`: Subscription is ended (no longer active). This status applies when subscription is ended due to `SUBSCRIPTION_EXPIRED` or `ACCESS_TOKEN_EXPIRED` event.\n  - `DELETED`: Subscription is ended as deleted (no longer active). This status applies when subscription information is kept (i.e. subscription workflow is no longer active but its meta-information is kept)."
              },
              { "type": "null" }
            ]
          },
          "protocol": {
            "type": "string",
            "const": "KAFKA",
            "title": "Protocol"
          },
          "protocolSettings": {
            "anyOf": [
              { "$ref": "#/components/schemas/ApacheKafkaSettings" },
              { "type": "null" }
            ]
          }
        },
        "type": "object",
        "required": ["sink", "types", "config", "id", "startsAt", "protocol"],
        "title": "ApacheKafkaSubscriptionResponse[SubscriptionEventType, SubscriptionDetail]"
      },
      "ApplicationServer": {
        "properties": {
          "ipv4Address": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Ipv4Address",
            "description": "IPv4 address may be specified in form <address/mask> as:\n  - address - an IPv4 number in dotted-quad form 1.2.3.4. Only this exact IP number will match the flow control rule.\n  - address/mask - an IP number as above with a mask width of the form 1.2.3.4/24.\n    In this case, all IP numbers from 1.2.3.0 to 1.2.3.255 will match. The bit width MUST be valid for the IP version.",
            "examples": ["198.51.100.0/24"]
          },
          "ipv6Address": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Ipv6Address",
            "description": "IPv6 address may be specified in form <address/mask> as:\n  - address - The /128 subnet is optional for single addresses:\n    - 2001:db8:85a3:8d3:1319:8a2e:370:7344\n    - 2001:db8:85a3:8d3:1319:8a2e:370:7344/128\n  - address/mask - an IP v6 number with a mask:\n    - 2001:db8:85a3:8d3::0/64\n    - 2001:db8:85a3:8d3::/64",
            "examples": ["2001:db8:85a3:8d3:1319:8a2e:370:7344"]
          }
        },
        "type": "object",
        "title": "ApplicationServer"
      },
      "Area": {
        "properties": {
          "areaType": { "$ref": "#/components/schemas/AreaType" }
        },
        "type": "object",
        "required": ["areaType"],
        "title": "Area"
      },
      "AreaType": {
        "type": "string",
        "enum": ["CIRCLE", "POLYGON"],
        "title": "AreaType"
      },
      "Circle-Output": {
        "properties": {
          "areaType": {
            "type": "string",
            "const": "CIRCLE",
            "title": "Areatype",
            "default": "CIRCLE"
          },
          "center": { "$ref": "#/components/schemas/Point" },
          "radius": {
            "type": "integer",
            "maximum": 200000.0,
            "minimum": 1.0,
            "title": "Radius",
            "description": "Expected accuracy for the subscription event of device location, in meters from `center`.\nNote: The area surface could be restricted locally depending on regulations. Implementations may enforce a larger minimum radius (e.g. 1000 meters).\n"
          }
        },
        "type": "object",
        "required": ["center", "radius"],
        "title": "Circle"
      },
      "ConnectivityType": {
        "type": "string",
        "enum": ["DATA", "SMS"],
        "title": "ConnectivityType"
      },
      "CreateSession": {
        "properties": {
          "device": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/app__schemas__device__Device-Input"
              },
              { "type": "null" }
            ]
          },
          "applicationServer": {
            "$ref": "#/components/schemas/ApplicationServer"
          },
          "devicePorts": {
            "anyOf": [
              { "$ref": "#/components/schemas/PortsSpec" },
              { "type": "null" }
            ],
            "description": "The ports used locally by the device for flows to which the requested QoS profile should apply. If omitted, then the qosProfile will apply to all flows between the device and the specified application server address and ports"
          },
          "applicationServerPorts": {
            "anyOf": [
              { "$ref": "#/components/schemas/PortsSpec" },
              { "type": "null" }
            ],
            "description": "A list of single ports or port ranges on the application server"
          },
          "qosProfile": {
            "type": "string",
            "maxLength": 256,
            "minLength": 3,
            "pattern": "^[a-zA-Z0-9_.-]+$",
            "title": "Qosprofile",
            "description": "A unique name for identifying a specific QoS profile.\nThis may follow different formats depending on the service providers implementation.\nSome options addresses:\n  - A UUID style string\n  - Support for predefined profiles QOS_S, QOS_M, QOS_L, and QOS_E\n  - A searchable descriptive name\nThe set of QoS Profiles that an operator is offering can be retrieved by means of the [QoS Profile API](link TBC).\n"
          },
          "sink": {
            "anyOf": [
              { "type": "string", "minLength": 1, "format": "uri" },
              { "type": "null" }
            ],
            "title": "Sink",
            "description": "The address to which events about all status changes of the session (e.g. session termination) shall be delivered using the selected protocol.",
            "examples": ["https://endpoint.example.com/sink"]
          },
          "sinkCredential": {
            "anyOf": [
              { "$ref": "#/components/schemas/SinkCredential" },
              { "type": "null" }
            ],
            "description": "A sink credential provides authentication or authorization information necessary to enable delivery of events to a target."
          },
          "duration": {
            "type": "integer",
            "minimum": 1.0,
            "title": "Duration",
            "description": "Requested session duration in seconds. Value may be explicitly limited for the QoS profile, as specified in the Qos Profile (see qos-profile API). Implementations can grant the requested session duration or set a different duration, based on network policies or conditions.\n",
            "examples": [3600]
          }
        },
        "type": "object",
        "required": ["applicationServer", "qosProfile", "duration"],
        "title": "CreateSession"
      },
      "CreateSubscriptionDetail-Input": {
        "properties": {
          "device": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/app__schemas__device__Device-Input"
              },
              { "type": "null" }
            ]
          }
        },
        "type": "object",
        "title": "CreateSubscriptionDetail"
      },
      "CreateSubscriptionDetail-Output": {
        "properties": {
          "device": {
            "anyOf": [
              { "$ref": "#/components/schemas/Device-Output" },
              { "type": "null" }
            ]
          }
        },
        "type": "object",
        "title": "CreateSubscriptionDetail"
      },
      "CredentialType": {
        "type": "string",
        "enum": ["PLAIN", "ACCESSTOKEN", "REFRESHTOKEN"],
        "title": "CredentialType"
      },
      "Device-Output": {
        "properties": {
          "phoneNumber": {
            "anyOf": [
              {
                "type": "string",
                "pattern": "^\\+[1-9][0-9]{4,14}$",
                "description": "A public identifier addressing a telephone subscription. In mobile networks it corresponds to the MSISDN (Mobile Station International Subscriber Directory Number). In order to be globally unique it has to be formatted in international format, according to E.164 standard, prefixed with '+'.",
                "examples": ["+123456789"]
              },
              { "type": "null" }
            ],
            "title": "Phonenumber"
          },
          "networkAccessIdentifier": {
            "anyOf": [
              {
                "type": "string",
                "description": "A public identifier addressing a subscription in a mobile network. In 3GPP terminology, it corresponds to the GPSI formatted with the External Identifier ({Local Identifier}@{Domain Identifier}). Unlike the telephone number, the network access identifier is not subjected to portability ruling in force, and is individually managed by each operator.",
                "examples": ["123456789@domain.com"]
              },
              { "type": "null" }
            ],
            "title": "Networkaccessidentifier"
          },
          "ipv4Address": {
            "anyOf": [
              { "$ref": "#/components/schemas/DeviceIpv4Addr-Output" },
              { "type": "null" }
            ]
          },
          "ipv6Address": {
            "anyOf": [
              { "type": "string", "format": "ipv6" },
              { "type": "null" }
            ],
            "title": "Ipv6Address"
          }
        },
        "type": "object",
        "title": "Device"
      },
      "DeviceIpv4Addr-Output": {
        "properties": {
          "publicAddress": {
            "type": "string",
            "format": "ipv4",
            "title": "Publicaddress",
            "description": "A single IPv4 address with no subnet mask",
            "examples": ["84.125.93.10"]
          },
          "privateAddress": {
            "anyOf": [
              { "type": "string", "format": "ipv4" },
              { "type": "null" }
            ],
            "title": "Privateaddress"
          },
          "publicPort": {
            "anyOf": [
              {
                "type": "integer",
                "maximum": 65535.0,
                "minimum": 0.0,
                "description": "TCP or UDP port number"
              },
              { "type": "null" }
            ],
            "title": "Publicport"
          }
        },
        "type": "object",
        "required": ["publicAddress"],
        "title": "DeviceIpv4Addr"
      },
      "DeviceIpv4Addr1": {
        "properties": {
          "publicAddress": {
            "type": "string",
            "format": "ipv4",
            "title": "Publicaddress"
          },
          "privateAddress": {
            "type": "string",
            "format": "ipv4",
            "title": "Privateaddress"
          },
          "publicPort": {
            "anyOf": [
              {
                "type": "integer",
                "maximum": 65535.0,
                "minimum": 0.0,
                "description": "TCP or UDP port number"
              },
              { "type": "null" }
            ],
            "title": "Publicport"
          }
        },
        "type": "object",
        "required": ["publicAddress", "privateAddress"],
        "title": "DeviceIpv4Addr1"
      },
      "DeviceIpv4Addr2": {
        "properties": {
          "publicAddress": {
            "type": "string",
            "format": "ipv4",
            "title": "Publicaddress"
          },
          "privateAddress": {
            "anyOf": [
              { "type": "string", "format": "ipv4" },
              { "type": "null" }
            ],
            "title": "Privateaddress"
          },
          "publicPort": {
            "type": "integer",
            "maximum": 65535.0,
            "minimum": 0.0,
            "title": "Publicport",
            "description": "TCP or UDP port number"
          }
        },
        "type": "object",
        "required": ["publicAddress", "publicPort"],
        "title": "DeviceIpv4Addr2"
      },
      "Duration": {
        "properties": {
          "value": {
            "anyOf": [
              { "type": "integer", "minimum": 1.0 },
              { "type": "null" }
            ],
            "title": "Value",
            "description": "Quantity of duration",
            "examples": [12]
          },
          "unit": {
            "anyOf": [
              { "$ref": "#/components/schemas/TimeUnitEnum" },
              { "type": "null" }
            ]
          }
        },
        "type": "object",
        "title": "Duration"
      },
      "ErrorInfo": {
        "properties": {
          "status": {
            "type": "integer",
            "title": "Status",
            "description": "HTTP response status code"
          },
          "code": {
            "type": "string",
            "title": "Code",
            "description": "Code given to this error"
          },
          "message": {
            "type": "string",
            "title": "Message",
            "description": "Detailed error description"
          }
        },
        "type": "object",
        "required": ["status", "code", "message"],
        "title": "ErrorInfo"
      },
      "ExtendSessionDuration": {
        "properties": {
          "requestedAdditionalDuration": {
            "type": "integer",
            "minimum": 1.0,
            "title": "Requestedadditionalduration",
            "description": "Additional duration in seconds to be added to the current session duration. The overall session duration, including extensions, shall not exceed the maximum duration limit for the QoS Profile.\n",
            "examples": [1800]
          }
        },
        "type": "object",
        "required": ["requestedAdditionalDuration"],
        "title": "ExtendSessionDuration"
      },
      "HTTPSettings": {
        "properties": {
          "headers": {
            "anyOf": [
              {
                "additionalProperties": { "type": "string" },
                "type": "object"
              },
              { "type": "null" }
            ],
            "title": "Headers",
            "description": "A set of key/value pairs that is copied into the HTTP request as custom headers.\n\nNOTE: Use/Applicability of this concept has not been discussed in Commonalities under the scope of Meta Release v0.4. When required by an API project as an option to meet a UC/Requirement, please generate an issue for Commonalities discussion about it."
          },
          "method": {
            "anyOf": [
              { "$ref": "#/components/schemas/Method" },
              { "type": "null" }
            ],
            "description": "The HTTP method to use for sending the message."
          }
        },
        "type": "object",
        "title": "HTTPSettings"
      },
      "HTTPSubscriptionRequest_SubscriptionEventType_SubscriptionDetail_": {
        "properties": {
          "sink": {
            "type": "string",
            "title": "Sink",
            "description": "The address to which events shall be delivered using the selected protocol.",
            "examples": ["https://endpoint.example.com/sink"]
          },
          "sinkCredential": {
            "anyOf": [
              { "$ref": "#/components/schemas/SinkCredential" },
              { "type": "null" }
            ]
          },
          "types": {
            "items": {
              "$ref": "#/components/schemas/app__schemas__geofencing__SubscriptionEventType"
            },
            "type": "array",
            "maxItems": 1,
            "minItems": 1,
            "title": "Types",
            "description": "Camara Event types which are eligible to be delivered by this subscription.\nNote: As of now we enforce to have only event type per subscription."
          },
          "config": {
            "$ref": "#/components/schemas/SubscriptionConfig_SubscriptionDetail_-Input"
          },
          "protocol": {
            "type": "string",
            "const": "HTTP",
            "title": "Protocol"
          },
          "protocolSettings": {
            "anyOf": [
              { "$ref": "#/components/schemas/HTTPSettings" },
              { "type": "null" }
            ]
          }
        },
        "type": "object",
        "required": ["sink", "types", "config", "protocol"],
        "title": "HTTPSubscriptionRequest[SubscriptionEventType, SubscriptionDetail]"
      },
      "HTTPSubscriptionResponse_SubscriptionEventType_SubscriptionDetail_": {
        "properties": {
          "sink": {
            "type": "string",
            "title": "Sink",
            "description": "The address to which events shall be delivered using the selected protocol.",
            "examples": ["https://endpoint.example.com/sink"]
          },
          "sinkCredential": {
            "anyOf": [
              { "$ref": "#/components/schemas/SinkCredential" },
              { "type": "null" }
            ]
          },
          "types": {
            "items": {
              "$ref": "#/components/schemas/app__schemas__geofencing__SubscriptionEventType"
            },
            "type": "array",
            "title": "Types",
            "description": "Camara Event types eligible to be delivered by this subscription.\n"
          },
          "config": {
            "$ref": "#/components/schemas/SubscriptionConfig_SubscriptionDetail_-Output"
          },
          "id": {
            "type": "string",
            "title": "Id",
            "description": "The unique identifier of the subscription in the scope of the subscription manager. When this information is contained within an event notification, this concept SHALL be referred as `subscriptionId` as per [Commonalities Event Notification Model](https://github.com/camaraproject/Commonalities/blob/main/documentation/API-design-guidelines.md#122-event-notification).",
            "examples": ["qs15-h556-rt89-1298"]
          },
          "startsAt": {
            "type": "string",
            "format": "date-time",
            "title": "Startsat",
            "description": "Date when the event subscription will begin/began."
          },
          "expiresAt": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time",
                "description": "Date when the event subscription will expire. Only provided when `subscriptionExpireTime` is indicated by API client or Telco Operator has a specific policy about that."
              },
              { "type": "null" }
            ],
            "title": "Expiresat"
          },
          "status": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/SubscriptionStatus",
                "description": "Current status of the subscription - Management of Subscription State engine is not mandatory for now. Note not all statuses may be considered to be implemented. Details:\n  - `ACTIVATION_REQUESTED`: Subscription creation (POST) is triggered but subscription creation process is not finished yet.\n  - `ACTIVE`: Subscription creation process is completed. Subscription is fully operative.\n  - `INACTIVE`: Subscription is temporarily inactive, but its workflow logic is not deleted.\n  - `EXPIRED`: Subscription is ended (no longer active). This status applies when subscription is ended due to `SUBSCRIPTION_EXPIRED` or `ACCESS_TOKEN_EXPIRED` event.\n  - `DELETED`: Subscription is ended as deleted (no longer active). This status applies when subscription information is kept (i.e. subscription workflow is no longer active but its meta-information is kept)."
              },
              { "type": "null" }
            ]
          },
          "protocol": {
            "type": "string",
            "const": "HTTP",
            "title": "Protocol"
          },
          "protocolSettings": {
            "anyOf": [
              { "$ref": "#/components/schemas/HTTPSettings" },
              { "type": "null" }
            ]
          }
        },
        "type": "object",
        "required": ["sink", "types", "config", "id", "startsAt", "protocol"],
        "title": "HTTPSubscriptionResponse[SubscriptionEventType, SubscriptionDetail]"
      },
      "HTTPValidationError": {
        "properties": {
          "detail": {
            "items": { "$ref": "#/components/schemas/ValidationError" },
            "type": "array",
            "title": "Detail"
          }
        },
        "type": "object",
        "title": "HTTPValidationError"
      },
      "L4sQueueType": {
        "type": "string",
        "enum": ["non-l4s-queue", "l4s-queue", "mixed-queue"],
        "title": "L4sQueueType"
      },
      "Location": {
        "properties": {
          "lastLocationTime": {
            "type": "string",
            "format": "date-time",
            "title": "Lastlocationtime",
            "description": "Last date and time when the device was localized. It must follow RFC 3339 and must have time zone. Recommended format is yyyy-MM-dd'T'HH:mm:ss.SSSZ (i.e. which allows 2023-07-03T14:27:08.312+02:00 or 2023-07-03T12:27:08.312Z)"
          },
          "area": { "$ref": "#/components/schemas/Area" }
        },
        "type": "object",
        "required": ["lastLocationTime", "area"],
        "title": "Location"
      },
      "MQTTSettings": {
        "properties": {
          "topicName": { "type": "string", "title": "Topicname" },
          "qos": {
            "anyOf": [{ "type": "integer" }, { "type": "null" }],
            "title": "Qos"
          },
          "retain": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Retain"
          },
          "expiry": {
            "anyOf": [{ "type": "integer" }, { "type": "null" }],
            "title": "Expiry"
          },
          "userProperties": {
            "anyOf": [
              { "additionalProperties": true, "type": "object" },
              { "type": "null" }
            ],
            "title": "Userproperties"
          }
        },
        "type": "object",
        "required": ["topicName"],
        "title": "MQTTSettings"
      },
      "MQTTSubscriptionRequest_SubscriptionEventType_SubscriptionDetail_": {
        "properties": {
          "sink": {
            "type": "string",
            "title": "Sink",
            "description": "The address to which events shall be delivered using the selected protocol.",
            "examples": ["https://endpoint.example.com/sink"]
          },
          "sinkCredential": {
            "anyOf": [
              { "$ref": "#/components/schemas/SinkCredential" },
              { "type": "null" }
            ]
          },
          "types": {
            "items": {
              "$ref": "#/components/schemas/app__schemas__geofencing__SubscriptionEventType"
            },
            "type": "array",
            "maxItems": 1,
            "minItems": 1,
            "title": "Types",
            "description": "Camara Event types which are eligible to be delivered by this subscription.\nNote: As of now we enforce to have only event type per subscription."
          },
          "config": {
            "$ref": "#/components/schemas/SubscriptionConfig_SubscriptionDetail_-Input"
          },
          "protocol": {
            "anyOf": [
              { "type": "string", "const": "MQTT3" },
              { "type": "string", "const": "MQTT5" }
            ],
            "title": "Protocol"
          },
          "protocolSettings": {
            "anyOf": [
              { "$ref": "#/components/schemas/MQTTSettings" },
              { "type": "null" }
            ]
          }
        },
        "type": "object",
        "required": ["sink", "types", "config", "protocol"],
        "title": "MQTTSubscriptionRequest[SubscriptionEventType, SubscriptionDetail]"
      },
      "MQTTSubscriptionResponse_SubscriptionEventType_SubscriptionDetail_": {
        "properties": {
          "sink": {
            "type": "string",
            "title": "Sink",
            "description": "The address to which events shall be delivered using the selected protocol.",
            "examples": ["https://endpoint.example.com/sink"]
          },
          "sinkCredential": {
            "anyOf": [
              { "$ref": "#/components/schemas/SinkCredential" },
              { "type": "null" }
            ]
          },
          "types": {
            "items": {
              "$ref": "#/components/schemas/app__schemas__geofencing__SubscriptionEventType"
            },
            "type": "array",
            "title": "Types",
            "description": "Camara Event types eligible to be delivered by this subscription.\n"
          },
          "config": {
            "$ref": "#/components/schemas/SubscriptionConfig_SubscriptionDetail_-Output"
          },
          "id": {
            "type": "string",
            "title": "Id",
            "description": "The unique identifier of the subscription in the scope of the subscription manager. When this information is contained within an event notification, this concept SHALL be referred as `subscriptionId` as per [Commonalities Event Notification Model](https://github.com/camaraproject/Commonalities/blob/main/documentation/API-design-guidelines.md#122-event-notification).",
            "examples": ["qs15-h556-rt89-1298"]
          },
          "startsAt": {
            "type": "string",
            "format": "date-time",
            "title": "Startsat",
            "description": "Date when the event subscription will begin/began."
          },
          "expiresAt": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time",
                "description": "Date when the event subscription will expire. Only provided when `subscriptionExpireTime` is indicated by API client or Telco Operator has a specific policy about that."
              },
              { "type": "null" }
            ],
            "title": "Expiresat"
          },
          "status": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/SubscriptionStatus",
                "description": "Current status of the subscription - Management of Subscription State engine is not mandatory for now. Note not all statuses may be considered to be implemented. Details:\n  - `ACTIVATION_REQUESTED`: Subscription creation (POST) is triggered but subscription creation process is not finished yet.\n  - `ACTIVE`: Subscription creation process is completed. Subscription is fully operative.\n  - `INACTIVE`: Subscription is temporarily inactive, but its workflow logic is not deleted.\n  - `EXPIRED`: Subscription is ended (no longer active). This status applies when subscription is ended due to `SUBSCRIPTION_EXPIRED` or `ACCESS_TOKEN_EXPIRED` event.\n  - `DELETED`: Subscription is ended as deleted (no longer active). This status applies when subscription information is kept (i.e. subscription workflow is no longer active but its meta-information is kept)."
              },
              { "type": "null" }
            ]
          },
          "protocol": {
            "anyOf": [
              { "type": "string", "const": "MQTT3" },
              { "type": "string", "const": "MQTT5" }
            ],
            "title": "Protocol"
          },
          "protocolSettings": {
            "anyOf": [
              { "$ref": "#/components/schemas/MQTTSettings" },
              { "type": "null" }
            ]
          }
        },
        "type": "object",
        "required": ["sink", "types", "config", "id", "startsAt", "protocol"],
        "title": "MQTTSubscriptionResponse[SubscriptionEventType, SubscriptionDetail]"
      },
      "Method": { "type": "string", "enum": ["POST"], "title": "Method" },
      "NATSSettings": {
        "properties": { "subject": { "type": "string", "title": "Subject" } },
        "type": "object",
        "required": ["subject"],
        "title": "NATSSettings"
      },
      "NATSSubscriptionRequest_SubscriptionEventType_SubscriptionDetail_": {
        "properties": {
          "sink": {
            "type": "string",
            "title": "Sink",
            "description": "The address to which events shall be delivered using the selected protocol.",
            "examples": ["https://endpoint.example.com/sink"]
          },
          "sinkCredential": {
            "anyOf": [
              { "$ref": "#/components/schemas/SinkCredential" },
              { "type": "null" }
            ]
          },
          "types": {
            "items": {
              "$ref": "#/components/schemas/app__schemas__geofencing__SubscriptionEventType"
            },
            "type": "array",
            "maxItems": 1,
            "minItems": 1,
            "title": "Types",
            "description": "Camara Event types which are eligible to be delivered by this subscription.\nNote: As of now we enforce to have only event type per subscription."
          },
          "config": {
            "$ref": "#/components/schemas/SubscriptionConfig_SubscriptionDetail_-Input"
          },
          "protocol": {
            "type": "string",
            "const": "NATS",
            "title": "Protocol"
          },
          "protocolSettings": {
            "anyOf": [
              { "$ref": "#/components/schemas/NATSSettings" },
              { "type": "null" }
            ]
          }
        },
        "type": "object",
        "required": ["sink", "types", "config", "protocol"],
        "title": "NATSSubscriptionRequest[SubscriptionEventType, SubscriptionDetail]"
      },
      "NATSSubscriptionResponse_SubscriptionEventType_SubscriptionDetail_": {
        "properties": {
          "sink": {
            "type": "string",
            "title": "Sink",
            "description": "The address to which events shall be delivered using the selected protocol.",
            "examples": ["https://endpoint.example.com/sink"]
          },
          "sinkCredential": {
            "anyOf": [
              { "$ref": "#/components/schemas/SinkCredential" },
              { "type": "null" }
            ]
          },
          "types": {
            "items": {
              "$ref": "#/components/schemas/app__schemas__geofencing__SubscriptionEventType"
            },
            "type": "array",
            "title": "Types",
            "description": "Camara Event types eligible to be delivered by this subscription.\n"
          },
          "config": {
            "$ref": "#/components/schemas/SubscriptionConfig_SubscriptionDetail_-Output"
          },
          "id": {
            "type": "string",
            "title": "Id",
            "description": "The unique identifier of the subscription in the scope of the subscription manager. When this information is contained within an event notification, this concept SHALL be referred as `subscriptionId` as per [Commonalities Event Notification Model](https://github.com/camaraproject/Commonalities/blob/main/documentation/API-design-guidelines.md#122-event-notification).",
            "examples": ["qs15-h556-rt89-1298"]
          },
          "startsAt": {
            "type": "string",
            "format": "date-time",
            "title": "Startsat",
            "description": "Date when the event subscription will begin/began."
          },
          "expiresAt": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time",
                "description": "Date when the event subscription will expire. Only provided when `subscriptionExpireTime` is indicated by API client or Telco Operator has a specific policy about that."
              },
              { "type": "null" }
            ],
            "title": "Expiresat"
          },
          "status": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/SubscriptionStatus",
                "description": "Current status of the subscription - Management of Subscription State engine is not mandatory for now. Note not all statuses may be considered to be implemented. Details:\n  - `ACTIVATION_REQUESTED`: Subscription creation (POST) is triggered but subscription creation process is not finished yet.\n  - `ACTIVE`: Subscription creation process is completed. Subscription is fully operative.\n  - `INACTIVE`: Subscription is temporarily inactive, but its workflow logic is not deleted.\n  - `EXPIRED`: Subscription is ended (no longer active). This status applies when subscription is ended due to `SUBSCRIPTION_EXPIRED` or `ACCESS_TOKEN_EXPIRED` event.\n  - `DELETED`: Subscription is ended as deleted (no longer active). This status applies when subscription information is kept (i.e. subscription workflow is no longer active but its meta-information is kept)."
              },
              { "type": "null" }
            ]
          },
          "protocol": {
            "type": "string",
            "const": "NATS",
            "title": "Protocol"
          },
          "protocolSettings": {
            "anyOf": [
              { "$ref": "#/components/schemas/NATSSettings" },
              { "type": "null" }
            ]
          }
        },
        "type": "object",
        "required": ["sink", "types", "config", "id", "startsAt", "protocol"],
        "title": "NATSSubscriptionResponse[SubscriptionEventType, SubscriptionDetail]"
      },
      "Point": {
        "properties": {
          "latitude": {
            "type": "number",
            "maximum": 90.0,
            "minimum": -90.0,
            "title": "Latitude",
            "description": "Latitude component of a location.",
            "examples": [50.735851]
          },
          "longitude": {
            "type": "number",
            "maximum": 180.0,
            "minimum": -180.0,
            "title": "Longitude",
            "description": "Longitude component of location.",
            "examples": [7.10066]
          }
        },
        "type": "object",
        "required": ["latitude", "longitude"],
        "title": "Point"
      },
      "PortsSpec": {
        "properties": {
          "ranges": {
            "anyOf": [
              {
                "items": { "$ref": "#/components/schemas/Range" },
                "type": "array",
                "minItems": 1
              },
              { "type": "null" }
            ],
            "title": "Ranges",
            "description": "Range of TCP or UDP ports"
          },
          "ports": {
            "anyOf": [
              {
                "items": {
                  "type": "integer",
                  "maximum": 65535.0,
                  "minimum": 0.0,
                  "description": "TCP or UDP port number"
                },
                "type": "array",
                "minItems": 1
              },
              { "type": "null" }
            ],
            "title": "Ports",
            "description": "Array of TCP or UDP ports"
          }
        },
        "type": "object",
        "title": "PortsSpec"
      },
      "ProvisioningInfo": {
        "properties": {
          "device": {
            "anyOf": [
              { "$ref": "#/components/schemas/Device-Output" },
              { "type": "null" }
            ]
          },
          "qosProfile": {
            "type": "string",
            "maxLength": 256,
            "minLength": 3,
            "pattern": "^[a-zA-Z0-9_.-]+$",
            "title": "Qosprofile",
            "description": "A unique name for identifying a specific QoS profile.\nThis may follow different formats depending on the service providers implementation.\nSome options addresses:\n  - A UUID style string\n  - Support for predefined profiles QOS_S, QOS_M, QOS_L, and QOS_E\n  - A searchable descriptive name\nThe set of QoS Profiles that an operator is offering can be retrieved by means of the [QoS Profile API](link TBC).\n"
          },
          "sink": {
            "anyOf": [
              { "type": "string", "minLength": 1, "format": "uri" },
              { "type": "null" }
            ],
            "title": "Sink",
            "description": "The address to which events shall be delivered using the selected protocol.",
            "examples": ["https://endpoint.example.com/sink"]
          },
          "sinkCredential": {
            "anyOf": [
              { "$ref": "#/components/schemas/SinkCredential" },
              { "type": "null" }
            ]
          },
          "provisioningId": {
            "type": "string",
            "format": "uuid",
            "title": "Provisioningid",
            "description": "Provisioning Identifier in UUID format"
          },
          "startedAt": {
            "anyOf": [
              { "type": "string", "format": "date-time" },
              { "type": "null" }
            ],
            "title": "Startedat",
            "description": "Date and time when the provisioning became \"AVAILABLE\". Not to be returned when `status` is \"REQUESTED\". Format must follow RFC 3339 and must indicate time zone (UTC or local).",
            "examples": ["2024-06-01T12:00:00Z"]
          },
          "status": { "$ref": "#/components/schemas/Status" },
          "statusInfo": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/app__schemas__qodProvisioning__StatusInfo"
              },
              { "type": "null" }
            ]
          }
        },
        "type": "object",
        "required": ["device", "qosProfile", "provisioningId", "status"],
        "title": "ProvisioningInfo"
      },
      "QosProfile": {
        "properties": {
          "name": {
            "type": "string",
            "maxLength": 256,
            "minLength": 3,
            "pattern": "^[a-zA-Z0-9_.-]+$",
            "title": "Name",
            "description": "A unique name for identifying a specific QoS profile.\nThis may follow different formats depending on the service providers implementation.\nSome options addresses:\n  - A UUID style string\n  - Support for predefined profile names like `QOS_E`, `QOS_S`, `QOS_M`, and `QOS_L`\n  - A searchable descriptive name",
            "examples": ["voice"]
          },
          "description": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Description",
            "description": "A description of the QoS profile.",
            "examples": ["QoS profile for video streaming"]
          },
          "status": { "$ref": "#/components/schemas/QosProfileStatus" },
          "targetMinUpstreamRate": {
            "anyOf": [
              { "$ref": "#/components/schemas/Rate" },
              { "type": "null" }
            ],
            "description": "This is the target minimum upload speed for the QoS profile.\nIt represents the minimum rate that the network attempts to deliver.\nPlease note that this is a target value—the network might not always be able to provide this rate under all conditions.\nIt helps ensure that applications like video calls or live streaming perform consistently."
          },
          "maxUpstreamRate": {
            "anyOf": [
              { "$ref": "#/components/schemas/Rate" },
              { "type": "null" }
            ],
            "description": "The maximum best effort data"
          },
          "maxUpstreamBurstRate": {
            "anyOf": [
              { "$ref": "#/components/schemas/Rate" },
              { "type": "null" }
            ],
            "description": "When defined, this is the maximum upstream burst rate for the QoS profile, that will enable\nthe network to burst data at a higher rate than the maxUpstreamRate for a period of time."
          },
          "targetMinDownstreamRate": {
            "anyOf": [
              { "$ref": "#/components/schemas/Rate" },
              { "type": "null" }
            ],
            "description": "This is the target maximum upload speed for the QoS profile.\nIt represents the maximum rate that the network attempts to deliver.\nPlease note that this is a target value—the network might not always be able to provide this rate under all conditions.\nIt helps ensure that applications like video calls or live streaming perform consistently."
          },
          "maxDownstreamRate": {
            "anyOf": [
              { "$ref": "#/components/schemas/Rate" },
              { "type": "null" }
            ],
            "description": "The maximum best effort rate"
          },
          "maxDownstreamBurstRate": {
            "anyOf": [
              { "$ref": "#/components/schemas/Rate" },
              { "type": "null" }
            ],
            "description": "When defined, this is the maximum downstream burst rate for the QoS profile, that will enable\nthe network to burst data at a higher rate than the maxDownstreamRate for a period of time.\nThis can result in improved user experience when there is additional network capacity.\nFor instance, when a user is streaming a video, the network can burst data at a higher rate\nto fill the buffer, and then return to the maxUpstreamRate once the buffer is full."
          },
          "minDuration": {
            "anyOf": [
              { "$ref": "#/components/schemas/Duration" },
              { "type": "null" }
            ],
            "description": "The shortest time period that this profile can be deployed."
          },
          "maxDuration": {
            "anyOf": [
              { "$ref": "#/components/schemas/Duration" },
              { "type": "null" }
            ],
            "description": "The maximum time period that this profile can be deployed.\nOverall session duration must not exceed this value. This includes the initial requested duration plus any extensions."
          },
          "priority": {
            "anyOf": [
              { "type": "integer", "maximum": 100.0, "minimum": 1.0 },
              { "type": "null" }
            ],
            "title": "Priority",
            "description": "Priority levels allow efficient resource allocation and ensure optimal performance\nfor various services in each technology, with the highest priority traffic receiving\npreferential treatment.\nThe lower value the higher priority.\nNot all access networks use the same priority range, so this priority will be\nscaled to the access network's priority range.",
            "examples": [20]
          },
          "packetDelayBudget": {
            "anyOf": [
              { "$ref": "#/components/schemas/Duration" },
              { "type": "null" }
            ],
            "description": "The packet delay budget is the maximum allowable one-way latency between the customer's device\nand the gateway from the operator's network to other networks. By limiting the delay, the network\ncan provide an acceptable level of performance for various services, such as voice calls,\nvideo streaming, and data.\nThe end-to-end or round trip latency will be about two times this value plus the latency not controlled\nby the operator"
          },
          "jitter": {
            "anyOf": [
              { "$ref": "#/components/schemas/Duration" },
              { "type": "null" }
            ],
            "description": "The jitter requirement aims to limit the maximum variation in round-trip\npacket delay for the 99th percentile of traffic, following ITU Y.1540\nstandards. It considers only acknowledged packets in a session, which are\npackets that receive a confirmation of receipt from the recipient (e.g.,\nusing TCP). This requirement helps maintain consistent latency, essential\nfor real-time applications such as VoIP, video calls, and gaming."
          },
          "packetErrorLossRate": {
            "anyOf": [
              { "type": "integer", "maximum": 10.0, "minimum": 1.0 },
              { "type": "null" }
            ],
            "title": "Packeterrorlossrate",
            "description": "This field specifies the acceptable level of data loss during transmission.\nThe value is an exponent of 10, so a value of 3 means that up to 10⁻³, or 0.1%, of the\ndata packets may be lost. This setting is part of a broader system that categorizes\ndifferent types of network traffic (like phone calls, video streams, or data transfers)\nto ensure they perform reliably on the network.",
            "examples": [3]
          },
          "l4sQueueType": {
            "anyOf": [
              { "$ref": "#/components/schemas/L4sQueueType" },
              { "type": "null" }
            ],
            "description": "\n**NOTE**: l4sQueueType is experimental and could change or be removed in a future release.\n\nSpecifies the type of queue for L4S (Low Latency, Low Loss, Scalable Throughput) traffic management. L4S is an advanced queue management approach designed to provide ultra-low latency and high throughput for internet traffic, particularly beneficial for interactive applications such as gaming, video conferencing, and virtual reality.\n\n**Queue Type Descriptions:**\n\n- **non-l4s-queue**:\n  A traditional queue used for legacy internet traffic that does not utilize L4S enhancements. It provides standard latency and throughput levels.\n\n- **l4s-queue**:\n  A dedicated queue optimized for L4S traffic, delivering ultra-low latency, low loss, and scalable throughput to support latency-sensitive applications.\n\n- **mixed-queue**:\n  A shared queue that can handle both L4S and traditional traffic, offering a balance between ultra-low latency for L4S flows and compatibility with non-L4S flows."
          },
          "serviceClass": {
            "anyOf": [
              { "$ref": "#/components/schemas/ServiceClass" },
              { "type": "null" }
            ],
            "description": "\n**NOTE**: serviceClass is experimental and could change or be removed in a future release.\n\nThe name of a Service Class, representing a QoS Profile designed to provide optimized behavior for a specific application type. While DSCP values are commonly associated with Service Classes, their use may vary across network segments and may not be applied throughout the entire end-to-end QoS session. This aligns with the serviceClass concept used in HomeDevicesQoQ for consistent terminology.\n\nService classes define specific QoS behaviors that map to DSCP (Differentiated Services Code Point) values or Microsoft QoS traffic types.\n\nThe supported mappings are:\n1. Values aligned with the [RFC4594](https://datatracker.ietf.org/doc/html/rfc4594) guidelines for differentiated traffic classes.\n2. Microsoft [QOS_TRAFFIC_TYPE](https://learn.microsoft.com/en-us/windows/win32/api/qos2/ne-qos2-qos_traffic_type) values for Windows developers.\n\n**Supported Service Classes**:\n\n| Service Class Name    | DSCP Name | DSCP value (decimal) | DCSP value (binary) | Microsoft Value | Application Examples                                                 |\n|-----------------------|-----------|----------------------|---------------------|-----------------|----------------------------------------------------------------------|\n| Microsoft Voice       |    CS7    |          56          |        111000       |       4,5       | Microsoft QOSTrafficTypeVoice and QOSTrafficTypeControl              |\n| Microsoft Audio/Video |    CS5    |          40          |        101000       |       2,3       | Microsoft QOSTrafficTypeExcellentEffort and QOSTrafficTypeAudioVideo |\n| Real-Time Interactive |    CS4    |          32          |        100000       |                 | Video conferencing and Interactive gaming                            |\n| Multimedia Streaming  |    AF31   |          26          |        011010       |                 | Streaming video and audio on demand                                  |\n| Broadcast Video       |    CS3    |          24          |        011000       |                 | Broadcast TV & live events                                           |\n| Low-Latency Data      |    AF21   |          18          |        010010       |                 | Client/server transactions Web-based ordering                        |\n| High-Throughput Data  |    AF11   |          10          |        001010       |                 | Store and forward applications                                       |\n| Low-Priority Data     |    CS1    |           8          |        001000       |        1        | Any flow that has no BW assurance - also:                            |\n|                       |           |                      |                     |                 | Microsoft QOSTrafficTypeBackground                                   |\n| Standard              |  DF(CS0)  |           0          |        000000       |        0        | Undifferentiated applications - also:                                |\n|                       |           |                      |                     |                 | Microsoft QOSTrafficTypeBestEffort                                   |",
            "examples": ["real_time_interactive"]
          }
        },
        "type": "object",
        "required": ["name", "status"],
        "title": "QosProfile"
      },
      "QosProfileDeviceRequest": {
        "properties": {
          "device": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/app__schemas__qos_profiles__Device"
              },
              { "type": "null" }
            ]
          },
          "name": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 256,
                "minLength": 3,
                "pattern": "^[a-zA-Z0-9_.-]+$",
                "description": "A unique name for identifying a specific QoS profile.\nThis may follow different formats depending on the service providers implementation.\nSome options addresses:\n  - A UUID style string\n  - Support for predefined profile names like `QOS_E`, `QOS_S`, `QOS_M`, and `QOS_L`\n  - A searchable descriptive name",
                "examples": ["voice"]
              },
              { "type": "null" }
            ],
            "title": "Name"
          },
          "status": {
            "anyOf": [
              { "$ref": "#/components/schemas/QosProfileStatus" },
              { "type": "null" }
            ]
          }
        },
        "type": "object",
        "title": "QosProfileDeviceRequest"
      },
      "QosProfileStatus": {
        "type": "string",
        "enum": ["ACTIVE", "INACTIVE", "DEPRECATED"],
        "title": "QosProfileStatus"
      },
      "Range": {
        "properties": {
          "from": {
            "type": "integer",
            "maximum": 65535.0,
            "minimum": 0.0,
            "title": "From",
            "description": "TCP or UDP port number"
          },
          "to": {
            "type": "integer",
            "maximum": 65535.0,
            "minimum": 0.0,
            "title": "To",
            "description": "TCP or UDP port number"
          }
        },
        "type": "object",
        "required": ["from", "to"],
        "title": "Range"
      },
      "Rate": {
        "properties": {
          "value": {
            "anyOf": [
              { "type": "integer", "maximum": 1024.0, "minimum": 0.0 },
              { "type": "null" }
            ],
            "title": "Value",
            "description": "Quantity of rate",
            "examples": [10]
          },
          "unit": {
            "anyOf": [
              { "$ref": "#/components/schemas/RateUnitEnum" },
              { "type": "null" }
            ]
          }
        },
        "type": "object",
        "title": "Rate"
      },
      "RateUnitEnum": {
        "type": "string",
        "enum": ["bps", "kbps", "Mbps", "Gbps", "Tbps"],
        "title": "RateUnitEnum"
      },
      "ReachabilityStatusResponse": {
        "properties": {
          "lastStatusTime": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time",
                "description": "Last time that the associated device reachability status was updated",
                "examples": ["2024-02-20T10:41:38.657Z"]
              },
              { "type": "null" }
            ],
            "title": "Laststatustime"
          },
          "reachable": {
            "type": "boolean",
            "title": "Reachable",
            "description": "Indicates overall device reachability"
          },
          "connectivity": {
            "anyOf": [
              {
                "items": { "$ref": "#/components/schemas/ConnectivityType" },
                "type": "array"
              },
              { "type": "null" }
            ],
            "title": "Connectivity"
          }
        },
        "type": "object",
        "required": ["reachable"],
        "title": "ReachabilityStatusResponse"
      },
      "RequestReachabilityStatus": {
        "properties": {
          "device": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/app__schemas__device__Device-Input"
              },
              { "type": "null" }
            ]
          }
        },
        "type": "object",
        "title": "RequestReachabilityStatus"
      },
      "RetrievalLocationRequest": {
        "properties": {
          "device": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/app__schemas__device__Device-Input"
              },
              { "type": "null" }
            ]
          },
          "maxAge": {
            "anyOf": [{ "type": "integer" }, { "type": "null" }],
            "title": "Maxage"
          },
          "maxSurface": {
            "anyOf": [
              { "type": "integer", "minimum": 1.0 },
              { "type": "null" }
            ],
            "title": "Maxsurface",
            "description": "Maximum surface in square meters which is accepted by the client for the location retrieval. Absence of maxSurface means \"any surface size\"."
          }
        },
        "type": "object",
        "title": "RetrievalLocationRequest"
      },
      "RetrieveProvisioningByDevice": {
        "properties": {
          "device": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/app__schemas__device__Device-Input"
              },
              { "type": "null" }
            ]
          }
        },
        "type": "object",
        "required": ["device"],
        "title": "RetrieveProvisioningByDevice"
      },
      "RetrieveSessionsInput": {
        "properties": {
          "device": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/app__schemas__device__Device-Input"
              },
              { "type": "null" }
            ]
          }
        },
        "type": "object",
        "title": "RetrieveSessionsInput"
      },
      "RoamingStatusRequest": {
        "properties": {
          "device": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/app__schemas__device__Device-Input"
              },
              { "type": "null" }
            ]
          }
        },
        "type": "object",
        "title": "RoamingStatusRequest"
      },
      "RoamingStatusResponse": {
        "properties": {
          "lastStatusTime": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time",
                "description": "Last time that the associated device reachability status was updated",
                "examples": ["2024-02-20T10:41:38.657Z"]
              },
              { "type": "null" }
            ],
            "title": "Laststatustime"
          },
          "roaming": {
            "type": "boolean",
            "title": "Roaming",
            "description": "Roaming status. True, if it is roaming"
          },
          "countryCode": {
            "anyOf": [
              {
                "type": "integer",
                "description": "The Mobile country code (MCC) as an geographic region identifier for the country and the dependent areas."
              },
              { "type": "null" }
            ],
            "title": "Countrycode"
          },
          "countryName": {
            "anyOf": [
              {
                "items": { "type": "string" },
                "type": "array",
                "description": "The ISO 3166 ALPHA-2 country-codes of mapped to mobile country code(MCC). If there is mapping of one MCC to multiple countries, then we have list of countries. If there is no mapping of MCC to any country, then an empty array [] shall be returned.."
              },
              { "type": "null" }
            ],
            "title": "Countryname"
          }
        },
        "type": "object",
        "required": ["roaming"],
        "title": "RoamingStatusResponse"
      },
      "SendCodeBody": {
        "properties": {
          "phoneNumber": {
            "type": "string",
            "pattern": "^\\+[1-9][0-9]{4,14}$",
            "title": "Phonenumber",
            "description": "A public identifier addressing a telephone subscription. In mobile networks it corresponds to the MSISDN (Mobile Station International Subscriber Directory Number). In order to be globally unique it has to be formatted in international format, according to E.164 standard, prefixed with '+'.",
            "examples": ["+346661113334"]
          },
          "message": {
            "type": "string",
            "maxLength": 160,
            "pattern": ".*\\{\\{code\\}\\}.*",
            "title": "Message",
            "description": "Message template used to compose the content of the SMS sent to the phone number. It must include the following label indicating where to include the short code `{{code}}`",
            "examples": [
              "{{code}} is your short code to authenticate with Cool App via SMS"
            ]
          }
        },
        "type": "object",
        "required": ["phoneNumber", "message"],
        "title": "SendCodeBody"
      },
      "SendCodeResponse": {
        "properties": {
          "authenticationId": {
            "type": "string",
            "maxLength": 36,
            "title": "Authenticationid",
            "description": "unique id of the verification attempt the code belongs to.",
            "examples": ["ea0840f3-3663-4149-bd10-c7c6b8912105"]
          }
        },
        "type": "object",
        "required": ["authenticationId"],
        "title": "SendCodeResponse"
      },
      "SenderSettlementMode": {
        "type": "string",
        "enum": ["settled", "unsettled"],
        "title": "SenderSettlementMode"
      },
      "ServiceClass": {
        "type": "string",
        "enum": [
          "microsoft_voice",
          "microsoft_audio_video",
          "real_time_interactive",
          "multimedia_streaming",
          "broadcast_video",
          "low_latency_data",
          "high_throughput_data",
          "low_priority_data",
          "standard"
        ],
        "title": "ServiceClass"
      },
      "SessionInfo": {
        "properties": {
          "device": {
            "anyOf": [
              { "$ref": "#/components/schemas/Device-Output" },
              { "type": "null" }
            ]
          },
          "applicationServer": {
            "$ref": "#/components/schemas/ApplicationServer"
          },
          "devicePorts": {
            "anyOf": [
              { "$ref": "#/components/schemas/PortsSpec" },
              { "type": "null" }
            ],
            "description": "The ports used locally by the device for flows to which the requested QoS profile should apply. If omitted, then the qosProfile will apply to all flows between the device and the specified application server address and ports"
          },
          "applicationServerPorts": {
            "anyOf": [
              { "$ref": "#/components/schemas/PortsSpec" },
              { "type": "null" }
            ],
            "description": "A list of single ports or port ranges on the application server"
          },
          "qosProfile": {
            "type": "string",
            "maxLength": 256,
            "minLength": 3,
            "pattern": "^[a-zA-Z0-9_.-]+$",
            "title": "Qosprofile",
            "description": "A unique name for identifying a specific QoS profile.\nThis may follow different formats depending on the service providers implementation.\nSome options addresses:\n  - A UUID style string\n  - Support for predefined profiles QOS_S, QOS_M, QOS_L, and QOS_E\n  - A searchable descriptive name\nThe set of QoS Profiles that an operator is offering can be retrieved by means of the [QoS Profile API](link TBC).\n"
          },
          "sink": {
            "anyOf": [
              { "type": "string", "minLength": 1, "format": "uri" },
              { "type": "null" }
            ],
            "title": "Sink",
            "description": "The address to which events about all status changes of the session (e.g. session termination) shall be delivered using the selected protocol.",
            "examples": ["https://endpoint.example.com/sink"]
          },
          "sinkCredential": {
            "anyOf": [
              { "$ref": "#/components/schemas/SinkCredential" },
              { "type": "null" }
            ],
            "description": "A sink credential provides authentication or authorization information necessary to enable delivery of events to a target."
          },
          "sessionId": {
            "type": "string",
            "format": "uuid",
            "title": "Sessionid",
            "description": "Session ID in UUID format"
          },
          "duration": {
            "type": "integer",
            "minimum": 1.0,
            "title": "Duration",
            "description": "Session duration in seconds. Implementations can grant the requested session duration or set a different duration, based on network policies or conditions.\n- When `qosStatus` is \"REQUESTED\", the value is the duration to be scheduled, granted by the implementation.\n- When `qosStatus` is AVAILABLE\", the value is the overall duration since `startedAt. When the session is extended, the value is the new overall duration of the session.\n- When `qosStatus` is \"UNAVAILABLE\", the value is the overall effective duration since `startedAt` until the session was terminated.\n",
            "examples": [3600]
          },
          "startedAt": {
            "anyOf": [
              { "type": "string", "format": "date-time" },
              { "type": "null" }
            ],
            "title": "Startedat",
            "description": "Date and time when the QoS status became \"AVAILABLE\". Not to be returned when `qosStatus` is \"REQUESTED\". Format must follow RFC 3339 and must indicate time zone (UTC or local).",
            "examples": ["2024-06-01T12:00:00Z"]
          },
          "expiresAt": {
            "anyOf": [
              { "type": "string", "format": "date-time" },
              { "type": "null" }
            ],
            "title": "Expiresat",
            "description": "Date and time of the QoS session expiration. Format must follow RFC 3339 and must indicate time zone (UTC or local).\n- When `qosStatus` is \"AVAILABLE\", it is the limit time when the session is scheduled to finnish, if not terminated by other means.\n- When `qosStatus` is \"UNAVAILABLE\", it is the time when the session was terminated.\n- Not to be returned when `qosStatus` is \"REQUESTED\".\nWhen the session is extended, the value is the new expiration time of the session.\n",
            "examples": ["2024-06-01T13:00:00Z"]
          },
          "qosStatus": { "$ref": "#/components/schemas/Status" },
          "statusInfo": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/app__schemas__quality_on_demand__StatusInfo"
              },
              { "type": "null" }
            ]
          }
        },
        "type": "object",
        "required": [
          "applicationServer",
          "qosProfile",
          "sessionId",
          "duration",
          "qosStatus"
        ],
        "title": "SessionInfo"
      },
      "SinkCredential": {
        "properties": {
          "credentialType": {
            "$ref": "#/components/schemas/CredentialType",
            "description": "The type of the credential."
          }
        },
        "type": "object",
        "required": ["credentialType"],
        "title": "SinkCredential"
      },
      "Status": {
        "type": "string",
        "enum": ["REQUESTED", "AVAILABLE", "UNAVAILABLE"],
        "title": "Status"
      },
      "SubscriptionConfig_CreateSubscriptionDetail_-Input": {
        "properties": {
          "subscriptionDetail": {
            "$ref": "#/components/schemas/CreateSubscriptionDetail-Input"
          },
          "subscriptionExpireTime": {
            "anyOf": [
              { "type": "string", "format": "date-time" },
              { "type": "null" }
            ],
            "title": "Subscriptionexpiretime",
            "description": "The subscription expiration time (in date-time format) requested by the API consumer. Up to API project decision to keep it.",
            "examples": ["2023-01-17T13:18:23.682Z"]
          },
          "subscriptionMaxEvents": {
            "anyOf": [
              { "type": "integer", "minimum": 1.0 },
              { "type": "null" }
            ],
            "title": "Subscriptionmaxevents",
            "description": "Identifies the maximum number of event reports to be generated (>=1) requested by the API consumer - Once this number is reached, the subscription ends. Up to API project decision to keep it.",
            "examples": [5]
          },
          "initialEvent": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Initialevent",
            "description": "Set to `true` by API consumer if consumer wants to get an event as soon as the subscription is created and current situation reflects event request.Up to API project decision to keep it.\nExample: Consumer request Roaming event. If consumer sets initialEvent to true and device is in roaming situation, an event is triggered\nUp to API project decision to keep it."
          }
        },
        "type": "object",
        "required": ["subscriptionDetail"],
        "title": "SubscriptionConfig[CreateSubscriptionDetail]"
      },
      "SubscriptionConfig_CreateSubscriptionDetail_-Output": {
        "properties": {
          "subscriptionDetail": {
            "$ref": "#/components/schemas/CreateSubscriptionDetail-Output"
          },
          "subscriptionExpireTime": {
            "anyOf": [
              { "type": "string", "format": "date-time" },
              { "type": "null" }
            ],
            "title": "Subscriptionexpiretime",
            "description": "The subscription expiration time (in date-time format) requested by the API consumer. Up to API project decision to keep it.",
            "examples": ["2023-01-17T13:18:23.682Z"]
          },
          "subscriptionMaxEvents": {
            "anyOf": [
              { "type": "integer", "minimum": 1.0 },
              { "type": "null" }
            ],
            "title": "Subscriptionmaxevents",
            "description": "Identifies the maximum number of event reports to be generated (>=1) requested by the API consumer - Once this number is reached, the subscription ends. Up to API project decision to keep it.",
            "examples": [5]
          },
          "initialEvent": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Initialevent",
            "description": "Set to `true` by API consumer if consumer wants to get an event as soon as the subscription is created and current situation reflects event request.Up to API project decision to keep it.\nExample: Consumer request Roaming event. If consumer sets initialEvent to true and device is in roaming situation, an event is triggered\nUp to API project decision to keep it."
          }
        },
        "type": "object",
        "required": ["subscriptionDetail"],
        "title": "SubscriptionConfig[CreateSubscriptionDetail]"
      },
      "SubscriptionConfig_SubscriptionDetail_-Input": {
        "properties": {
          "subscriptionDetail": {
            "$ref": "#/components/schemas/SubscriptionDetail-Input"
          },
          "subscriptionExpireTime": {
            "anyOf": [
              { "type": "string", "format": "date-time" },
              { "type": "null" }
            ],
            "title": "Subscriptionexpiretime",
            "description": "The subscription expiration time (in date-time format) requested by the API consumer. Up to API project decision to keep it.",
            "examples": ["2023-01-17T13:18:23.682Z"]
          },
          "subscriptionMaxEvents": {
            "anyOf": [
              { "type": "integer", "minimum": 1.0 },
              { "type": "null" }
            ],
            "title": "Subscriptionmaxevents",
            "description": "Identifies the maximum number of event reports to be generated (>=1) requested by the API consumer - Once this number is reached, the subscription ends. Up to API project decision to keep it.",
            "examples": [5]
          },
          "initialEvent": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Initialevent",
            "description": "Set to `true` by API consumer if consumer wants to get an event as soon as the subscription is created and current situation reflects event request.Up to API project decision to keep it.\nExample: Consumer request Roaming event. If consumer sets initialEvent to true and device is in roaming situation, an event is triggered\nUp to API project decision to keep it."
          }
        },
        "type": "object",
        "required": ["subscriptionDetail"],
        "title": "SubscriptionConfig[SubscriptionDetail]"
      },
      "SubscriptionConfig_SubscriptionDetail_-Output": {
        "properties": {
          "subscriptionDetail": {
            "$ref": "#/components/schemas/SubscriptionDetail-Output"
          },
          "subscriptionExpireTime": {
            "anyOf": [
              { "type": "string", "format": "date-time" },
              { "type": "null" }
            ],
            "title": "Subscriptionexpiretime",
            "description": "The subscription expiration time (in date-time format) requested by the API consumer. Up to API project decision to keep it.",
            "examples": ["2023-01-17T13:18:23.682Z"]
          },
          "subscriptionMaxEvents": {
            "anyOf": [
              { "type": "integer", "minimum": 1.0 },
              { "type": "null" }
            ],
            "title": "Subscriptionmaxevents",
            "description": "Identifies the maximum number of event reports to be generated (>=1) requested by the API consumer - Once this number is reached, the subscription ends. Up to API project decision to keep it.",
            "examples": [5]
          },
          "initialEvent": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Initialevent",
            "description": "Set to `true` by API consumer if consumer wants to get an event as soon as the subscription is created and current situation reflects event request.Up to API project decision to keep it.\nExample: Consumer request Roaming event. If consumer sets initialEvent to true and device is in roaming situation, an event is triggered\nUp to API project decision to keep it."
          }
        },
        "type": "object",
        "required": ["subscriptionDetail"],
        "title": "SubscriptionConfig[SubscriptionDetail]"
      },
      "SubscriptionDetail-Input": {
        "properties": {
          "device": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/app__schemas__device__Device-Input"
              },
              { "type": "null" }
            ]
          },
          "area": {
            "$ref": "#/components/schemas/app__schemas__geofencing__Circle"
          }
        },
        "type": "object",
        "required": ["area"],
        "title": "SubscriptionDetail"
      },
      "SubscriptionDetail-Output": {
        "properties": {
          "device": {
            "anyOf": [
              { "$ref": "#/components/schemas/Device-Output" },
              { "type": "null" }
            ]
          },
          "area": { "$ref": "#/components/schemas/Circle-Output" }
        },
        "type": "object",
        "required": ["area"],
        "title": "SubscriptionDetail"
      },
      "SubscriptionRequest_SubscriptionEventType_SubscriptionDetail_": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/HTTPSubscriptionRequest_SubscriptionEventType_SubscriptionDetail_"
          },
          {
            "$ref": "#/components/schemas/MQTTSubscriptionRequest_SubscriptionEventType_SubscriptionDetail_"
          },
          {
            "$ref": "#/components/schemas/AMQPSubscriptionRequest_SubscriptionEventType_SubscriptionDetail_"
          },
          {
            "$ref": "#/components/schemas/ApacheKafkaSubscriptionRequest_SubscriptionEventType_SubscriptionDetail_"
          },
          {
            "$ref": "#/components/schemas/NATSSubscriptionRequest_SubscriptionEventType_SubscriptionDetail_"
          }
        ],
        "discriminator": {
          "propertyName": "protocol",
          "mapping": {
            "AMQP": "#/components/schemas/AMQPSubscriptionRequest_SubscriptionEventType_SubscriptionDetail_",
            "HTTP": "#/components/schemas/HTTPSubscriptionRequest_SubscriptionEventType_SubscriptionDetail_",
            "KAFKA": "#/components/schemas/ApacheKafkaSubscriptionRequest_SubscriptionEventType_SubscriptionDetail_",
            "MQTT3": "#/components/schemas/MQTTSubscriptionRequest_SubscriptionEventType_SubscriptionDetail_",
            "MQTT5": "#/components/schemas/MQTTSubscriptionRequest_SubscriptionEventType_SubscriptionDetail_",
            "NATS": "#/components/schemas/NATSSubscriptionRequest_SubscriptionEventType_SubscriptionDetail_"
          }
        }
      },
      "SubscriptionStatus": {
        "type": "string",
        "enum": [
          "ACTIVATION_REQUESTED",
          "ACTIVE",
          "EXPIRED",
          "INACTIVE",
          "DELETED"
        ],
        "title": "SubscriptionStatus"
      },
      "Subscription_SubscriptionEventType_SubscriptionDetail_": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/HTTPSubscriptionResponse_SubscriptionEventType_SubscriptionDetail_"
          },
          {
            "$ref": "#/components/schemas/MQTTSubscriptionResponse_SubscriptionEventType_SubscriptionDetail_"
          },
          {
            "$ref": "#/components/schemas/AMQPSubscriptionResponse_SubscriptionEventType_SubscriptionDetail_"
          },
          {
            "$ref": "#/components/schemas/ApacheKafkaSubscriptionResponse_SubscriptionEventType_SubscriptionDetail_"
          },
          {
            "$ref": "#/components/schemas/NATSSubscriptionResponse_SubscriptionEventType_SubscriptionDetail_"
          }
        ],
        "discriminator": {
          "propertyName": "protocol",
          "mapping": {
            "AMQP": "#/components/schemas/AMQPSubscriptionResponse_SubscriptionEventType_SubscriptionDetail_",
            "HTTP": "#/components/schemas/HTTPSubscriptionResponse_SubscriptionEventType_SubscriptionDetail_",
            "KAFKA": "#/components/schemas/ApacheKafkaSubscriptionResponse_SubscriptionEventType_SubscriptionDetail_",
            "MQTT3": "#/components/schemas/MQTTSubscriptionResponse_SubscriptionEventType_SubscriptionDetail_",
            "MQTT5": "#/components/schemas/MQTTSubscriptionResponse_SubscriptionEventType_SubscriptionDetail_",
            "NATS": "#/components/schemas/NATSSubscriptionResponse_SubscriptionEventType_SubscriptionDetail_"
          }
        }
      },
      "TimeUnitEnum": {
        "type": "string",
        "enum": [
          "Days",
          "Hours",
          "Minutes",
          "Seconds",
          "Milliseconds",
          "Microseconds",
          "Nanoseconds"
        ],
        "title": "TimeUnitEnum"
      },
      "TriggerProvisioning": {
        "properties": {
          "device": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/app__schemas__device__Device-Input"
              },
              { "type": "null" }
            ]
          },
          "qosProfile": {
            "type": "string",
            "maxLength": 256,
            "minLength": 3,
            "pattern": "^[a-zA-Z0-9_.-]+$",
            "title": "Qosprofile",
            "description": "A unique name for identifying a specific QoS profile.\nThis may follow different formats depending on the service providers implementation.\nSome options addresses:\n  - A UUID style string\n  - Support for predefined profiles QOS_S, QOS_M, QOS_L, and QOS_E\n  - A searchable descriptive name\nThe set of QoS Profiles that an operator is offering can be retrieved by means of the [QoS Profile API](link TBC).\n"
          },
          "sink": {
            "anyOf": [
              { "type": "string", "minLength": 1, "format": "uri" },
              { "type": "null" }
            ],
            "title": "Sink",
            "description": "The address to which events shall be delivered using the selected protocol.",
            "examples": ["https://endpoint.example.com/sink"]
          },
          "sinkCredential": {
            "anyOf": [
              { "$ref": "#/components/schemas/SinkCredential" },
              { "type": "null" }
            ]
          }
        },
        "type": "object",
        "required": ["device", "qosProfile"],
        "title": "TriggerProvisioning"
      },
      "ValidateCodeBody": {
        "properties": {
          "authenticationId": {
            "type": "string",
            "maxLength": 36,
            "title": "Authenticationid",
            "description": "unique id of the verification attempt the code belongs to.",
            "examples": ["ea0840f3-3663-4149-bd10-c7c6b8912105"]
          },
          "code": {
            "type": "string",
            "maxLength": 10,
            "title": "Code",
            "description": "temporal, short code to be validated",
            "examples": ["AJY3"]
          }
        },
        "type": "object",
        "required": ["authenticationId", "code"],
        "title": "ValidateCodeBody"
      },
      "ValidationError": {
        "properties": {
          "loc": {
            "items": { "anyOf": [{ "type": "string" }, { "type": "integer" }] },
            "type": "array",
            "title": "Location"
          },
          "msg": { "type": "string", "title": "Message" },
          "type": { "type": "string", "title": "Error Type" }
        },
        "type": "object",
        "required": ["loc", "msg", "type"],
        "title": "ValidationError"
      },
      "VerificationResult": {
        "type": "string",
        "enum": ["TRUE", "FALSE", "PARTIAL", "UNKNOWN"],
        "title": "VerificationResult"
      },
      "VerifyLocationRequest": {
        "properties": {
          "device": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/app__schemas__device__Device-Input"
              },
              { "type": "null" }
            ]
          },
          "area": {
            "$ref": "#/components/schemas/app__schemas__location__Circle"
          },
          "maxAge": {
            "anyOf": [{ "type": "integer" }, { "type": "null" }],
            "title": "Maxage"
          }
        },
        "type": "object",
        "required": ["area"],
        "title": "VerifyLocationRequest"
      },
      "VerifyLocationResponse": {
        "properties": {
          "lastLocationTime": {
            "type": "string",
            "format": "date-time",
            "title": "Lastlocationtime",
            "description": "Last date and time when the device was localized. It must follow RFC 3339 and must have time zone. Recommended format is yyyy-MM-dd'T'HH:mm:ss.SSSZ (i.e. which allows 2023-07-03T14:27:08.312+02:00 or 2023-07-03T12:27:08.312Z)"
          },
          "verificationResult": {
            "$ref": "#/components/schemas/VerificationResult"
          },
          "matchRate": {
            "anyOf": [
              { "type": "integer", "maximum": 99.0, "minimum": 1.0 },
              { "type": "null" }
            ],
            "title": "Matchrate",
            "description": "Estimation of the match rate between the area in the request (R), and area where the network locates the device (N), calculated as the percent value of the intersection of both areas divided by the network area, that is (R ∩ N) / N * 100. Included only if VerificationResult is PARTIAL."
          }
        },
        "type": "object",
        "required": ["lastLocationTime", "verificationResult"],
        "title": "VerifyLocationResponse"
      },
      "app__schemas__device__Device-Input": {
        "properties": {
          "phoneNumber": {
            "anyOf": [
              {
                "type": "string",
                "pattern": "^\\+[1-9][0-9]{4,14}$",
                "description": "A public identifier addressing a telephone subscription. In mobile networks it corresponds to the MSISDN (Mobile Station International Subscriber Directory Number). In order to be globally unique it has to be formatted in international format, according to E.164 standard, prefixed with '+'.",
                "examples": ["+123456789"]
              },
              { "type": "null" }
            ],
            "title": "Phonenumber"
          },
          "networkAccessIdentifier": {
            "anyOf": [
              {
                "type": "string",
                "description": "A public identifier addressing a subscription in a mobile network. In 3GPP terminology, it corresponds to the GPSI formatted with the External Identifier ({Local Identifier}@{Domain Identifier}). Unlike the telephone number, the network access identifier is not subjected to portability ruling in force, and is individually managed by each operator.",
                "examples": ["123456789@domain.com"]
              },
              { "type": "null" }
            ],
            "title": "Networkaccessidentifier"
          },
          "ipv4Address": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/app__schemas__device__DeviceIpv4Addr"
              },
              { "type": "null" }
            ]
          },
          "ipv6Address": {
            "anyOf": [
              { "type": "string", "format": "ipv6" },
              { "type": "null" }
            ],
            "title": "Ipv6Address"
          }
        },
        "type": "object",
        "title": "Device"
      },
      "app__schemas__device__DeviceIpv4Addr": {
        "properties": {
          "publicAddress": {
            "type": "string",
            "format": "ipv4",
            "title": "Publicaddress",
            "description": "A single IPv4 address with no subnet mask",
            "examples": ["84.125.93.10"]
          },
          "privateAddress": {
            "anyOf": [
              { "type": "string", "format": "ipv4" },
              { "type": "null" }
            ],
            "title": "Privateaddress"
          },
          "publicPort": {
            "anyOf": [
              {
                "type": "integer",
                "maximum": 65535.0,
                "minimum": 0.0,
                "description": "TCP or UDP port number"
              },
              { "type": "null" }
            ],
            "title": "Publicport"
          }
        },
        "type": "object",
        "required": ["publicAddress"],
        "title": "DeviceIpv4Addr"
      },
      "app__schemas__geofencing__Circle": {
        "properties": {
          "areaType": {
            "type": "string",
            "const": "CIRCLE",
            "title": "Areatype",
            "default": "CIRCLE"
          },
          "center": { "$ref": "#/components/schemas/Point" },
          "radius": {
            "type": "integer",
            "maximum": 200000.0,
            "minimum": 1.0,
            "title": "Radius",
            "description": "Expected accuracy for the subscription event of device location, in meters from `center`.\nNote: The area surface could be restricted locally depending on regulations. Implementations may enforce a larger minimum radius (e.g. 1000 meters).\n"
          }
        },
        "type": "object",
        "required": ["center", "radius"],
        "title": "Circle"
      },
      "app__schemas__geofencing__SubscriptionEventType": {
        "type": "string",
        "enum": [
          "org.camaraproject.geofencing-subscriptions.v0.area-entered",
          "org.camaraproject.geofencing-subscriptions.v0.area-left"
        ],
        "title": "SubscriptionEventType"
      },
      "app__schemas__location__Circle": {
        "properties": {
          "areaType": {
            "$ref": "#/components/schemas/AreaType",
            "default": "CIRCLE"
          },
          "center": { "$ref": "#/components/schemas/Point" },
          "radius": {
            "type": "number",
            "minimum": 1.0,
            "title": "Radius",
            "description": "Distance from the center in meters"
          }
        },
        "type": "object",
        "required": ["center", "radius"],
        "title": "Circle"
      },
      "app__schemas__qodProvisioning__StatusInfo": {
        "type": "string",
        "enum": ["NETWORK_TERMINATED", "DELETE_REQUESTED"],
        "title": "StatusInfo"
      },
      "app__schemas__qos_profiles__Device": {
        "properties": {
          "phoneNumber": {
            "anyOf": [
              {
                "type": "string",
                "pattern": "^\\+[1-9][0-9]{4,14}$",
                "description": "A public identifier addressing a telephone subscription. In mobile networks it corresponds to the MSISDN (Mobile Station International Subscriber Directory Number). In order to be globally unique it has to be formatted in international format, according to E.164 standard, prefixed with '+'.",
                "examples": ["+346661113334"]
              },
              { "type": "null" }
            ],
            "title": "Phonenumber"
          },
          "networkAccessIdentifier": {
            "anyOf": [
              {
                "type": "string",
                "description": "A public identifier addressing a subscription in a mobile network. In 3GPP terminology, it corresponds to the GPSI formatted with the External Identifier ({Local Identifier}@{Domain Identifier}). Unlike the telephone number, the network access identifier is not subjected to portability ruling in force, and is individually managed by each operator.",
                "examples": ["123456789@domain.com"]
              },
              { "type": "null" }
            ],
            "title": "Networkaccessidentifier"
          },
          "ipv4Address": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/app__schemas__qos_profiles__DeviceIpv4Addr"
              },
              { "type": "null" }
            ]
          },
          "ipv6Address": {
            "anyOf": [
              { "type": "string", "format": "ipv6" },
              { "type": "null" }
            ],
            "title": "Ipv6Address"
          }
        },
        "type": "object",
        "title": "Device"
      },
      "app__schemas__qos_profiles__DeviceIpv4Addr": {
        "anyOf": [
          { "$ref": "#/components/schemas/DeviceIpv4Addr1" },
          { "$ref": "#/components/schemas/DeviceIpv4Addr2" }
        ],
        "title": "DeviceIpv4Addr",
        "description": "The device should be identified by either the public (observed) IP address and port as seen by the application server, or the private (local) and any public (observed) IP addresses in use by the device (this information can be obtained by various means, for example from some DNS servers).\n\nIf the allocated and observed IP addresses are the same (i.e. NAT is not in use) then  the same address should be specified for both publicAddress and privateAddress.\n\nIf NAT64 is in use, the device should be identified by its publicAddress and publicPort, or separately by its allocated IPv6 address (field ipv6Address of the Device object)\n\nIn all cases, publicAddress must be specified, along with at least one of either privateAddress or publicPort, dependent upon which is known. In general, mobile devices cannot be identified by their public IPv4 address alone."
      },
      "app__schemas__quality_on_demand__StatusInfo": {
        "type": "string",
        "enum": ["DURATION_EXPIRED", "NETWORK_TERMINATED", "DELETE_REQUESTED"],
        "title": "StatusInfo"
      },
      "app__schemas__reachability_status__SubscriptionEventType": {
        "type": "string",
        "enum": [
          "org.camaraproject.device-reachability-status-subscriptions.v0.reachability-data",
          "org.camaraproject.device-reachability-status-subscriptions.v0.reachability-sms",
          "org.camaraproject.device-reachability-status-subscriptions.v0.reachability-disconnected"
        ],
        "title": "SubscriptionEventType"
      },
      "app__schemas__roaming_status__SubscriptionEventType": {
        "type": "string",
        "enum": [
          "org.camaraproject.device-roaming-status-subscriptions.v0.roaming-status",
          "org.camaraproject.device-roaming-status-subscriptions.v0.roaming-on",
          "org.camaraproject.device-roaming-status-subscriptions.v0.roaming-off",
          "org.camaraproject.device-roaming-status-subscriptions.v0.roaming-change-country"
        ],
        "title": "SubscriptionEventType"
      },
      "app__schemas__subscriptions__AMQPSubscriptionRequest_SubscriptionEventType_CreateSubscriptionDetail___1": {
        "properties": {
          "sink": {
            "type": "string",
            "title": "Sink",
            "description": "The address to which events shall be delivered using the selected protocol.",
            "examples": ["https://endpoint.example.com/sink"]
          },
          "sinkCredential": {
            "anyOf": [
              { "$ref": "#/components/schemas/SinkCredential" },
              { "type": "null" }
            ]
          },
          "types": {
            "items": {
              "$ref": "#/components/schemas/app__schemas__reachability_status__SubscriptionEventType"
            },
            "type": "array",
            "maxItems": 1,
            "minItems": 1,
            "title": "Types",
            "description": "Camara Event types which are eligible to be delivered by this subscription.\nNote: As of now we enforce to have only event type per subscription."
          },
          "config": {
            "$ref": "#/components/schemas/SubscriptionConfig_CreateSubscriptionDetail_-Input"
          },
          "protocol": {
            "type": "string",
            "const": "AMQP",
            "title": "Protocol"
          },
          "protocolSettings": {
            "anyOf": [
              { "$ref": "#/components/schemas/AMQPSettings" },
              { "type": "null" }
            ]
          }
        },
        "type": "object",
        "required": ["sink", "types", "config", "protocol"],
        "title": "AMQPSubscriptionRequest[SubscriptionEventType, CreateSubscriptionDetail]"
      },
      "app__schemas__subscriptions__AMQPSubscriptionRequest_SubscriptionEventType_CreateSubscriptionDetail___2": {
        "properties": {
          "sink": {
            "type": "string",
            "title": "Sink",
            "description": "The address to which events shall be delivered using the selected protocol.",
            "examples": ["https://endpoint.example.com/sink"]
          },
          "sinkCredential": {
            "anyOf": [
              { "$ref": "#/components/schemas/SinkCredential" },
              { "type": "null" }
            ]
          },
          "types": {
            "items": {
              "$ref": "#/components/schemas/app__schemas__roaming_status__SubscriptionEventType"
            },
            "type": "array",
            "maxItems": 1,
            "minItems": 1,
            "title": "Types",
            "description": "Camara Event types which are eligible to be delivered by this subscription.\nNote: As of now we enforce to have only event type per subscription."
          },
          "config": {
            "$ref": "#/components/schemas/SubscriptionConfig_CreateSubscriptionDetail_-Input"
          },
          "protocol": {
            "type": "string",
            "const": "AMQP",
            "title": "Protocol"
          },
          "protocolSettings": {
            "anyOf": [
              { "$ref": "#/components/schemas/AMQPSettings" },
              { "type": "null" }
            ]
          }
        },
        "type": "object",
        "required": ["sink", "types", "config", "protocol"],
        "title": "AMQPSubscriptionRequest[SubscriptionEventType, CreateSubscriptionDetail]"
      },
      "app__schemas__subscriptions__AMQPSubscriptionResponse_SubscriptionEventType_CreateSubscriptionDetail___1": {
        "properties": {
          "sink": {
            "type": "string",
            "title": "Sink",
            "description": "The address to which events shall be delivered using the selected protocol.",
            "examples": ["https://endpoint.example.com/sink"]
          },
          "sinkCredential": {
            "anyOf": [
              { "$ref": "#/components/schemas/SinkCredential" },
              { "type": "null" }
            ]
          },
          "types": {
            "items": {
              "$ref": "#/components/schemas/app__schemas__reachability_status__SubscriptionEventType"
            },
            "type": "array",
            "title": "Types",
            "description": "Camara Event types eligible to be delivered by this subscription.\n"
          },
          "config": {
            "$ref": "#/components/schemas/SubscriptionConfig_CreateSubscriptionDetail_-Output"
          },
          "id": {
            "type": "string",
            "title": "Id",
            "description": "The unique identifier of the subscription in the scope of the subscription manager. When this information is contained within an event notification, this concept SHALL be referred as `subscriptionId` as per [Commonalities Event Notification Model](https://github.com/camaraproject/Commonalities/blob/main/documentation/API-design-guidelines.md#122-event-notification).",
            "examples": ["qs15-h556-rt89-1298"]
          },
          "startsAt": {
            "type": "string",
            "format": "date-time",
            "title": "Startsat",
            "description": "Date when the event subscription will begin/began."
          },
          "expiresAt": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time",
                "description": "Date when the event subscription will expire. Only provided when `subscriptionExpireTime` is indicated by API client or Telco Operator has a specific policy about that."
              },
              { "type": "null" }
            ],
            "title": "Expiresat"
          },
          "status": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/SubscriptionStatus",
                "description": "Current status of the subscription - Management of Subscription State engine is not mandatory for now. Note not all statuses may be considered to be implemented. Details:\n  - `ACTIVATION_REQUESTED`: Subscription creation (POST) is triggered but subscription creation process is not finished yet.\n  - `ACTIVE`: Subscription creation process is completed. Subscription is fully operative.\n  - `INACTIVE`: Subscription is temporarily inactive, but its workflow logic is not deleted.\n  - `EXPIRED`: Subscription is ended (no longer active). This status applies when subscription is ended due to `SUBSCRIPTION_EXPIRED` or `ACCESS_TOKEN_EXPIRED` event.\n  - `DELETED`: Subscription is ended as deleted (no longer active). This status applies when subscription information is kept (i.e. subscription workflow is no longer active but its meta-information is kept)."
              },
              { "type": "null" }
            ]
          },
          "protocol": {
            "type": "string",
            "const": "AMQP",
            "title": "Protocol"
          },
          "protocolSettings": {
            "anyOf": [
              { "$ref": "#/components/schemas/AMQPSettings" },
              { "type": "null" }
            ]
          }
        },
        "type": "object",
        "required": ["sink", "types", "config", "id", "startsAt", "protocol"],
        "title": "AMQPSubscriptionResponse[SubscriptionEventType, CreateSubscriptionDetail]"
      },
      "app__schemas__subscriptions__AMQPSubscriptionResponse_SubscriptionEventType_CreateSubscriptionDetail___2": {
        "properties": {
          "sink": {
            "type": "string",
            "title": "Sink",
            "description": "The address to which events shall be delivered using the selected protocol.",
            "examples": ["https://endpoint.example.com/sink"]
          },
          "sinkCredential": {
            "anyOf": [
              { "$ref": "#/components/schemas/SinkCredential" },
              { "type": "null" }
            ]
          },
          "types": {
            "items": {
              "$ref": "#/components/schemas/app__schemas__roaming_status__SubscriptionEventType"
            },
            "type": "array",
            "title": "Types",
            "description": "Camara Event types eligible to be delivered by this subscription.\n"
          },
          "config": {
            "$ref": "#/components/schemas/SubscriptionConfig_CreateSubscriptionDetail_-Output"
          },
          "id": {
            "type": "string",
            "title": "Id",
            "description": "The unique identifier of the subscription in the scope of the subscription manager. When this information is contained within an event notification, this concept SHALL be referred as `subscriptionId` as per [Commonalities Event Notification Model](https://github.com/camaraproject/Commonalities/blob/main/documentation/API-design-guidelines.md#122-event-notification).",
            "examples": ["qs15-h556-rt89-1298"]
          },
          "startsAt": {
            "type": "string",
            "format": "date-time",
            "title": "Startsat",
            "description": "Date when the event subscription will begin/began."
          },
          "expiresAt": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time",
                "description": "Date when the event subscription will expire. Only provided when `subscriptionExpireTime` is indicated by API client or Telco Operator has a specific policy about that."
              },
              { "type": "null" }
            ],
            "title": "Expiresat"
          },
          "status": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/SubscriptionStatus",
                "description": "Current status of the subscription - Management of Subscription State engine is not mandatory for now. Note not all statuses may be considered to be implemented. Details:\n  - `ACTIVATION_REQUESTED`: Subscription creation (POST) is triggered but subscription creation process is not finished yet.\n  - `ACTIVE`: Subscription creation process is completed. Subscription is fully operative.\n  - `INACTIVE`: Subscription is temporarily inactive, but its workflow logic is not deleted.\n  - `EXPIRED`: Subscription is ended (no longer active). This status applies when subscription is ended due to `SUBSCRIPTION_EXPIRED` or `ACCESS_TOKEN_EXPIRED` event.\n  - `DELETED`: Subscription is ended as deleted (no longer active). This status applies when subscription information is kept (i.e. subscription workflow is no longer active but its meta-information is kept)."
              },
              { "type": "null" }
            ]
          },
          "protocol": {
            "type": "string",
            "const": "AMQP",
            "title": "Protocol"
          },
          "protocolSettings": {
            "anyOf": [
              { "$ref": "#/components/schemas/AMQPSettings" },
              { "type": "null" }
            ]
          }
        },
        "type": "object",
        "required": ["sink", "types", "config", "id", "startsAt", "protocol"],
        "title": "AMQPSubscriptionResponse[SubscriptionEventType, CreateSubscriptionDetail]"
      },
      "app__schemas__subscriptions__ApacheKafkaSubscriptionRequest_SubscriptionEventType_CreateSubscriptionDetail___1": {
        "properties": {
          "sink": {
            "type": "string",
            "title": "Sink",
            "description": "The address to which events shall be delivered using the selected protocol.",
            "examples": ["https://endpoint.example.com/sink"]
          },
          "sinkCredential": {
            "anyOf": [
              { "$ref": "#/components/schemas/SinkCredential" },
              { "type": "null" }
            ]
          },
          "types": {
            "items": {
              "$ref": "#/components/schemas/app__schemas__reachability_status__SubscriptionEventType"
            },
            "type": "array",
            "maxItems": 1,
            "minItems": 1,
            "title": "Types",
            "description": "Camara Event types which are eligible to be delivered by this subscription.\nNote: As of now we enforce to have only event type per subscription."
          },
          "config": {
            "$ref": "#/components/schemas/SubscriptionConfig_CreateSubscriptionDetail_-Input"
          },
          "protocol": {
            "type": "string",
            "const": "KAFKA",
            "title": "Protocol"
          },
          "protocolSettings": {
            "anyOf": [
              { "$ref": "#/components/schemas/ApacheKafkaSettings" },
              { "type": "null" }
            ]
          }
        },
        "type": "object",
        "required": ["sink", "types", "config", "protocol"],
        "title": "ApacheKafkaSubscriptionRequest[SubscriptionEventType, CreateSubscriptionDetail]"
      },
      "app__schemas__subscriptions__ApacheKafkaSubscriptionRequest_SubscriptionEventType_CreateSubscriptionDetail___2": {
        "properties": {
          "sink": {
            "type": "string",
            "title": "Sink",
            "description": "The address to which events shall be delivered using the selected protocol.",
            "examples": ["https://endpoint.example.com/sink"]
          },
          "sinkCredential": {
            "anyOf": [
              { "$ref": "#/components/schemas/SinkCredential" },
              { "type": "null" }
            ]
          },
          "types": {
            "items": {
              "$ref": "#/components/schemas/app__schemas__roaming_status__SubscriptionEventType"
            },
            "type": "array",
            "maxItems": 1,
            "minItems": 1,
            "title": "Types",
            "description": "Camara Event types which are eligible to be delivered by this subscription.\nNote: As of now we enforce to have only event type per subscription."
          },
          "config": {
            "$ref": "#/components/schemas/SubscriptionConfig_CreateSubscriptionDetail_-Input"
          },
          "protocol": {
            "type": "string",
            "const": "KAFKA",
            "title": "Protocol"
          },
          "protocolSettings": {
            "anyOf": [
              { "$ref": "#/components/schemas/ApacheKafkaSettings" },
              { "type": "null" }
            ]
          }
        },
        "type": "object",
        "required": ["sink", "types", "config", "protocol"],
        "title": "ApacheKafkaSubscriptionRequest[SubscriptionEventType, CreateSubscriptionDetail]"
      },
      "app__schemas__subscriptions__ApacheKafkaSubscriptionResponse_SubscriptionEventType_CreateSubscriptionDetail___1": {
        "properties": {
          "sink": {
            "type": "string",
            "title": "Sink",
            "description": "The address to which events shall be delivered using the selected protocol.",
            "examples": ["https://endpoint.example.com/sink"]
          },
          "sinkCredential": {
            "anyOf": [
              { "$ref": "#/components/schemas/SinkCredential" },
              { "type": "null" }
            ]
          },
          "types": {
            "items": {
              "$ref": "#/components/schemas/app__schemas__reachability_status__SubscriptionEventType"
            },
            "type": "array",
            "title": "Types",
            "description": "Camara Event types eligible to be delivered by this subscription.\n"
          },
          "config": {
            "$ref": "#/components/schemas/SubscriptionConfig_CreateSubscriptionDetail_-Output"
          },
          "id": {
            "type": "string",
            "title": "Id",
            "description": "The unique identifier of the subscription in the scope of the subscription manager. When this information is contained within an event notification, this concept SHALL be referred as `subscriptionId` as per [Commonalities Event Notification Model](https://github.com/camaraproject/Commonalities/blob/main/documentation/API-design-guidelines.md#122-event-notification).",
            "examples": ["qs15-h556-rt89-1298"]
          },
          "startsAt": {
            "type": "string",
            "format": "date-time",
            "title": "Startsat",
            "description": "Date when the event subscription will begin/began."
          },
          "expiresAt": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time",
                "description": "Date when the event subscription will expire. Only provided when `subscriptionExpireTime` is indicated by API client or Telco Operator has a specific policy about that."
              },
              { "type": "null" }
            ],
            "title": "Expiresat"
          },
          "status": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/SubscriptionStatus",
                "description": "Current status of the subscription - Management of Subscription State engine is not mandatory for now. Note not all statuses may be considered to be implemented. Details:\n  - `ACTIVATION_REQUESTED`: Subscription creation (POST) is triggered but subscription creation process is not finished yet.\n  - `ACTIVE`: Subscription creation process is completed. Subscription is fully operative.\n  - `INACTIVE`: Subscription is temporarily inactive, but its workflow logic is not deleted.\n  - `EXPIRED`: Subscription is ended (no longer active). This status applies when subscription is ended due to `SUBSCRIPTION_EXPIRED` or `ACCESS_TOKEN_EXPIRED` event.\n  - `DELETED`: Subscription is ended as deleted (no longer active). This status applies when subscription information is kept (i.e. subscription workflow is no longer active but its meta-information is kept)."
              },
              { "type": "null" }
            ]
          },
          "protocol": {
            "type": "string",
            "const": "KAFKA",
            "title": "Protocol"
          },
          "protocolSettings": {
            "anyOf": [
              { "$ref": "#/components/schemas/ApacheKafkaSettings" },
              { "type": "null" }
            ]
          }
        },
        "type": "object",
        "required": ["sink", "types", "config", "id", "startsAt", "protocol"],
        "title": "ApacheKafkaSubscriptionResponse[SubscriptionEventType, CreateSubscriptionDetail]"
      },
      "app__schemas__subscriptions__ApacheKafkaSubscriptionResponse_SubscriptionEventType_CreateSubscriptionDetail___2": {
        "properties": {
          "sink": {
            "type": "string",
            "title": "Sink",
            "description": "The address to which events shall be delivered using the selected protocol.",
            "examples": ["https://endpoint.example.com/sink"]
          },
          "sinkCredential": {
            "anyOf": [
              { "$ref": "#/components/schemas/SinkCredential" },
              { "type": "null" }
            ]
          },
          "types": {
            "items": {
              "$ref": "#/components/schemas/app__schemas__roaming_status__SubscriptionEventType"
            },
            "type": "array",
            "title": "Types",
            "description": "Camara Event types eligible to be delivered by this subscription.\n"
          },
          "config": {
            "$ref": "#/components/schemas/SubscriptionConfig_CreateSubscriptionDetail_-Output"
          },
          "id": {
            "type": "string",
            "title": "Id",
            "description": "The unique identifier of the subscription in the scope of the subscription manager. When this information is contained within an event notification, this concept SHALL be referred as `subscriptionId` as per [Commonalities Event Notification Model](https://github.com/camaraproject/Commonalities/blob/main/documentation/API-design-guidelines.md#122-event-notification).",
            "examples": ["qs15-h556-rt89-1298"]
          },
          "startsAt": {
            "type": "string",
            "format": "date-time",
            "title": "Startsat",
            "description": "Date when the event subscription will begin/began."
          },
          "expiresAt": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time",
                "description": "Date when the event subscription will expire. Only provided when `subscriptionExpireTime` is indicated by API client or Telco Operator has a specific policy about that."
              },
              { "type": "null" }
            ],
            "title": "Expiresat"
          },
          "status": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/SubscriptionStatus",
                "description": "Current status of the subscription - Management of Subscription State engine is not mandatory for now. Note not all statuses may be considered to be implemented. Details:\n  - `ACTIVATION_REQUESTED`: Subscription creation (POST) is triggered but subscription creation process is not finished yet.\n  - `ACTIVE`: Subscription creation process is completed. Subscription is fully operative.\n  - `INACTIVE`: Subscription is temporarily inactive, but its workflow logic is not deleted.\n  - `EXPIRED`: Subscription is ended (no longer active). This status applies when subscription is ended due to `SUBSCRIPTION_EXPIRED` or `ACCESS_TOKEN_EXPIRED` event.\n  - `DELETED`: Subscription is ended as deleted (no longer active). This status applies when subscription information is kept (i.e. subscription workflow is no longer active but its meta-information is kept)."
              },
              { "type": "null" }
            ]
          },
          "protocol": {
            "type": "string",
            "const": "KAFKA",
            "title": "Protocol"
          },
          "protocolSettings": {
            "anyOf": [
              { "$ref": "#/components/schemas/ApacheKafkaSettings" },
              { "type": "null" }
            ]
          }
        },
        "type": "object",
        "required": ["sink", "types", "config", "id", "startsAt", "protocol"],
        "title": "ApacheKafkaSubscriptionResponse[SubscriptionEventType, CreateSubscriptionDetail]"
      },
      "app__schemas__subscriptions__HTTPSubscriptionRequest_SubscriptionEventType_CreateSubscriptionDetail___1": {
        "properties": {
          "sink": {
            "type": "string",
            "title": "Sink",
            "description": "The address to which events shall be delivered using the selected protocol.",
            "examples": ["https://endpoint.example.com/sink"]
          },
          "sinkCredential": {
            "anyOf": [
              { "$ref": "#/components/schemas/SinkCredential" },
              { "type": "null" }
            ]
          },
          "types": {
            "items": {
              "$ref": "#/components/schemas/app__schemas__reachability_status__SubscriptionEventType"
            },
            "type": "array",
            "maxItems": 1,
            "minItems": 1,
            "title": "Types",
            "description": "Camara Event types which are eligible to be delivered by this subscription.\nNote: As of now we enforce to have only event type per subscription."
          },
          "config": {
            "$ref": "#/components/schemas/SubscriptionConfig_CreateSubscriptionDetail_-Input"
          },
          "protocol": {
            "type": "string",
            "const": "HTTP",
            "title": "Protocol"
          },
          "protocolSettings": {
            "anyOf": [
              { "$ref": "#/components/schemas/HTTPSettings" },
              { "type": "null" }
            ]
          }
        },
        "type": "object",
        "required": ["sink", "types", "config", "protocol"],
        "title": "HTTPSubscriptionRequest[SubscriptionEventType, CreateSubscriptionDetail]"
      },
      "app__schemas__subscriptions__HTTPSubscriptionRequest_SubscriptionEventType_CreateSubscriptionDetail___2": {
        "properties": {
          "sink": {
            "type": "string",
            "title": "Sink",
            "description": "The address to which events shall be delivered using the selected protocol.",
            "examples": ["https://endpoint.example.com/sink"]
          },
          "sinkCredential": {
            "anyOf": [
              { "$ref": "#/components/schemas/SinkCredential" },
              { "type": "null" }
            ]
          },
          "types": {
            "items": {
              "$ref": "#/components/schemas/app__schemas__roaming_status__SubscriptionEventType"
            },
            "type": "array",
            "maxItems": 1,
            "minItems": 1,
            "title": "Types",
            "description": "Camara Event types which are eligible to be delivered by this subscription.\nNote: As of now we enforce to have only event type per subscription."
          },
          "config": {
            "$ref": "#/components/schemas/SubscriptionConfig_CreateSubscriptionDetail_-Input"
          },
          "protocol": {
            "type": "string",
            "const": "HTTP",
            "title": "Protocol"
          },
          "protocolSettings": {
            "anyOf": [
              { "$ref": "#/components/schemas/HTTPSettings" },
              { "type": "null" }
            ]
          }
        },
        "type": "object",
        "required": ["sink", "types", "config", "protocol"],
        "title": "HTTPSubscriptionRequest[SubscriptionEventType, CreateSubscriptionDetail]"
      },
      "app__schemas__subscriptions__HTTPSubscriptionResponse_SubscriptionEventType_CreateSubscriptionDetail___1": {
        "properties": {
          "sink": {
            "type": "string",
            "title": "Sink",
            "description": "The address to which events shall be delivered using the selected protocol.",
            "examples": ["https://endpoint.example.com/sink"]
          },
          "sinkCredential": {
            "anyOf": [
              { "$ref": "#/components/schemas/SinkCredential" },
              { "type": "null" }
            ]
          },
          "types": {
            "items": {
              "$ref": "#/components/schemas/app__schemas__reachability_status__SubscriptionEventType"
            },
            "type": "array",
            "title": "Types",
            "description": "Camara Event types eligible to be delivered by this subscription.\n"
          },
          "config": {
            "$ref": "#/components/schemas/SubscriptionConfig_CreateSubscriptionDetail_-Output"
          },
          "id": {
            "type": "string",
            "title": "Id",
            "description": "The unique identifier of the subscription in the scope of the subscription manager. When this information is contained within an event notification, this concept SHALL be referred as `subscriptionId` as per [Commonalities Event Notification Model](https://github.com/camaraproject/Commonalities/blob/main/documentation/API-design-guidelines.md#122-event-notification).",
            "examples": ["qs15-h556-rt89-1298"]
          },
          "startsAt": {
            "type": "string",
            "format": "date-time",
            "title": "Startsat",
            "description": "Date when the event subscription will begin/began."
          },
          "expiresAt": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time",
                "description": "Date when the event subscription will expire. Only provided when `subscriptionExpireTime` is indicated by API client or Telco Operator has a specific policy about that."
              },
              { "type": "null" }
            ],
            "title": "Expiresat"
          },
          "status": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/SubscriptionStatus",
                "description": "Current status of the subscription - Management of Subscription State engine is not mandatory for now. Note not all statuses may be considered to be implemented. Details:\n  - `ACTIVATION_REQUESTED`: Subscription creation (POST) is triggered but subscription creation process is not finished yet.\n  - `ACTIVE`: Subscription creation process is completed. Subscription is fully operative.\n  - `INACTIVE`: Subscription is temporarily inactive, but its workflow logic is not deleted.\n  - `EXPIRED`: Subscription is ended (no longer active). This status applies when subscription is ended due to `SUBSCRIPTION_EXPIRED` or `ACCESS_TOKEN_EXPIRED` event.\n  - `DELETED`: Subscription is ended as deleted (no longer active). This status applies when subscription information is kept (i.e. subscription workflow is no longer active but its meta-information is kept)."
              },
              { "type": "null" }
            ]
          },
          "protocol": {
            "type": "string",
            "const": "HTTP",
            "title": "Protocol"
          },
          "protocolSettings": {
            "anyOf": [
              { "$ref": "#/components/schemas/HTTPSettings" },
              { "type": "null" }
            ]
          }
        },
        "type": "object",
        "required": ["sink", "types", "config", "id", "startsAt", "protocol"],
        "title": "HTTPSubscriptionResponse[SubscriptionEventType, CreateSubscriptionDetail]"
      },
      "app__schemas__subscriptions__HTTPSubscriptionResponse_SubscriptionEventType_CreateSubscriptionDetail___2": {
        "properties": {
          "sink": {
            "type": "string",
            "title": "Sink",
            "description": "The address to which events shall be delivered using the selected protocol.",
            "examples": ["https://endpoint.example.com/sink"]
          },
          "sinkCredential": {
            "anyOf": [
              { "$ref": "#/components/schemas/SinkCredential" },
              { "type": "null" }
            ]
          },
          "types": {
            "items": {
              "$ref": "#/components/schemas/app__schemas__roaming_status__SubscriptionEventType"
            },
            "type": "array",
            "title": "Types",
            "description": "Camara Event types eligible to be delivered by this subscription.\n"
          },
          "config": {
            "$ref": "#/components/schemas/SubscriptionConfig_CreateSubscriptionDetail_-Output"
          },
          "id": {
            "type": "string",
            "title": "Id",
            "description": "The unique identifier of the subscription in the scope of the subscription manager. When this information is contained within an event notification, this concept SHALL be referred as `subscriptionId` as per [Commonalities Event Notification Model](https://github.com/camaraproject/Commonalities/blob/main/documentation/API-design-guidelines.md#122-event-notification).",
            "examples": ["qs15-h556-rt89-1298"]
          },
          "startsAt": {
            "type": "string",
            "format": "date-time",
            "title": "Startsat",
            "description": "Date when the event subscription will begin/began."
          },
          "expiresAt": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time",
                "description": "Date when the event subscription will expire. Only provided when `subscriptionExpireTime` is indicated by API client or Telco Operator has a specific policy about that."
              },
              { "type": "null" }
            ],
            "title": "Expiresat"
          },
          "status": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/SubscriptionStatus",
                "description": "Current status of the subscription - Management of Subscription State engine is not mandatory for now. Note not all statuses may be considered to be implemented. Details:\n  - `ACTIVATION_REQUESTED`: Subscription creation (POST) is triggered but subscription creation process is not finished yet.\n  - `ACTIVE`: Subscription creation process is completed. Subscription is fully operative.\n  - `INACTIVE`: Subscription is temporarily inactive, but its workflow logic is not deleted.\n  - `EXPIRED`: Subscription is ended (no longer active). This status applies when subscription is ended due to `SUBSCRIPTION_EXPIRED` or `ACCESS_TOKEN_EXPIRED` event.\n  - `DELETED`: Subscription is ended as deleted (no longer active). This status applies when subscription information is kept (i.e. subscription workflow is no longer active but its meta-information is kept)."
              },
              { "type": "null" }
            ]
          },
          "protocol": {
            "type": "string",
            "const": "HTTP",
            "title": "Protocol"
          },
          "protocolSettings": {
            "anyOf": [
              { "$ref": "#/components/schemas/HTTPSettings" },
              { "type": "null" }
            ]
          }
        },
        "type": "object",
        "required": ["sink", "types", "config", "id", "startsAt", "protocol"],
        "title": "HTTPSubscriptionResponse[SubscriptionEventType, CreateSubscriptionDetail]"
      },
      "app__schemas__subscriptions__MQTTSubscriptionRequest_SubscriptionEventType_CreateSubscriptionDetail___1": {
        "properties": {
          "sink": {
            "type": "string",
            "title": "Sink",
            "description": "The address to which events shall be delivered using the selected protocol.",
            "examples": ["https://endpoint.example.com/sink"]
          },
          "sinkCredential": {
            "anyOf": [
              { "$ref": "#/components/schemas/SinkCredential" },
              { "type": "null" }
            ]
          },
          "types": {
            "items": {
              "$ref": "#/components/schemas/app__schemas__reachability_status__SubscriptionEventType"
            },
            "type": "array",
            "maxItems": 1,
            "minItems": 1,
            "title": "Types",
            "description": "Camara Event types which are eligible to be delivered by this subscription.\nNote: As of now we enforce to have only event type per subscription."
          },
          "config": {
            "$ref": "#/components/schemas/SubscriptionConfig_CreateSubscriptionDetail_-Input"
          },
          "protocol": {
            "anyOf": [
              { "type": "string", "const": "MQTT3" },
              { "type": "string", "const": "MQTT5" }
            ],
            "title": "Protocol"
          },
          "protocolSettings": {
            "anyOf": [
              { "$ref": "#/components/schemas/MQTTSettings" },
              { "type": "null" }
            ]
          }
        },
        "type": "object",
        "required": ["sink", "types", "config", "protocol"],
        "title": "MQTTSubscriptionRequest[SubscriptionEventType, CreateSubscriptionDetail]"
      },
      "app__schemas__subscriptions__MQTTSubscriptionRequest_SubscriptionEventType_CreateSubscriptionDetail___2": {
        "properties": {
          "sink": {
            "type": "string",
            "title": "Sink",
            "description": "The address to which events shall be delivered using the selected protocol.",
            "examples": ["https://endpoint.example.com/sink"]
          },
          "sinkCredential": {
            "anyOf": [
              { "$ref": "#/components/schemas/SinkCredential" },
              { "type": "null" }
            ]
          },
          "types": {
            "items": {
              "$ref": "#/components/schemas/app__schemas__roaming_status__SubscriptionEventType"
            },
            "type": "array",
            "maxItems": 1,
            "minItems": 1,
            "title": "Types",
            "description": "Camara Event types which are eligible to be delivered by this subscription.\nNote: As of now we enforce to have only event type per subscription."
          },
          "config": {
            "$ref": "#/components/schemas/SubscriptionConfig_CreateSubscriptionDetail_-Input"
          },
          "protocol": {
            "anyOf": [
              { "type": "string", "const": "MQTT3" },
              { "type": "string", "const": "MQTT5" }
            ],
            "title": "Protocol"
          },
          "protocolSettings": {
            "anyOf": [
              { "$ref": "#/components/schemas/MQTTSettings" },
              { "type": "null" }
            ]
          }
        },
        "type": "object",
        "required": ["sink", "types", "config", "protocol"],
        "title": "MQTTSubscriptionRequest[SubscriptionEventType, CreateSubscriptionDetail]"
      },
      "app__schemas__subscriptions__MQTTSubscriptionResponse_SubscriptionEventType_CreateSubscriptionDetail___1": {
        "properties": {
          "sink": {
            "type": "string",
            "title": "Sink",
            "description": "The address to which events shall be delivered using the selected protocol.",
            "examples": ["https://endpoint.example.com/sink"]
          },
          "sinkCredential": {
            "anyOf": [
              { "$ref": "#/components/schemas/SinkCredential" },
              { "type": "null" }
            ]
          },
          "types": {
            "items": {
              "$ref": "#/components/schemas/app__schemas__reachability_status__SubscriptionEventType"
            },
            "type": "array",
            "title": "Types",
            "description": "Camara Event types eligible to be delivered by this subscription.\n"
          },
          "config": {
            "$ref": "#/components/schemas/SubscriptionConfig_CreateSubscriptionDetail_-Output"
          },
          "id": {
            "type": "string",
            "title": "Id",
            "description": "The unique identifier of the subscription in the scope of the subscription manager. When this information is contained within an event notification, this concept SHALL be referred as `subscriptionId` as per [Commonalities Event Notification Model](https://github.com/camaraproject/Commonalities/blob/main/documentation/API-design-guidelines.md#122-event-notification).",
            "examples": ["qs15-h556-rt89-1298"]
          },
          "startsAt": {
            "type": "string",
            "format": "date-time",
            "title": "Startsat",
            "description": "Date when the event subscription will begin/began."
          },
          "expiresAt": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time",
                "description": "Date when the event subscription will expire. Only provided when `subscriptionExpireTime` is indicated by API client or Telco Operator has a specific policy about that."
              },
              { "type": "null" }
            ],
            "title": "Expiresat"
          },
          "status": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/SubscriptionStatus",
                "description": "Current status of the subscription - Management of Subscription State engine is not mandatory for now. Note not all statuses may be considered to be implemented. Details:\n  - `ACTIVATION_REQUESTED`: Subscription creation (POST) is triggered but subscription creation process is not finished yet.\n  - `ACTIVE`: Subscription creation process is completed. Subscription is fully operative.\n  - `INACTIVE`: Subscription is temporarily inactive, but its workflow logic is not deleted.\n  - `EXPIRED`: Subscription is ended (no longer active). This status applies when subscription is ended due to `SUBSCRIPTION_EXPIRED` or `ACCESS_TOKEN_EXPIRED` event.\n  - `DELETED`: Subscription is ended as deleted (no longer active). This status applies when subscription information is kept (i.e. subscription workflow is no longer active but its meta-information is kept)."
              },
              { "type": "null" }
            ]
          },
          "protocol": {
            "anyOf": [
              { "type": "string", "const": "MQTT3" },
              { "type": "string", "const": "MQTT5" }
            ],
            "title": "Protocol"
          },
          "protocolSettings": {
            "anyOf": [
              { "$ref": "#/components/schemas/MQTTSettings" },
              { "type": "null" }
            ]
          }
        },
        "type": "object",
        "required": ["sink", "types", "config", "id", "startsAt", "protocol"],
        "title": "MQTTSubscriptionResponse[SubscriptionEventType, CreateSubscriptionDetail]"
      },
      "app__schemas__subscriptions__MQTTSubscriptionResponse_SubscriptionEventType_CreateSubscriptionDetail___2": {
        "properties": {
          "sink": {
            "type": "string",
            "title": "Sink",
            "description": "The address to which events shall be delivered using the selected protocol.",
            "examples": ["https://endpoint.example.com/sink"]
          },
          "sinkCredential": {
            "anyOf": [
              { "$ref": "#/components/schemas/SinkCredential" },
              { "type": "null" }
            ]
          },
          "types": {
            "items": {
              "$ref": "#/components/schemas/app__schemas__roaming_status__SubscriptionEventType"
            },
            "type": "array",
            "title": "Types",
            "description": "Camara Event types eligible to be delivered by this subscription.\n"
          },
          "config": {
            "$ref": "#/components/schemas/SubscriptionConfig_CreateSubscriptionDetail_-Output"
          },
          "id": {
            "type": "string",
            "title": "Id",
            "description": "The unique identifier of the subscription in the scope of the subscription manager. When this information is contained within an event notification, this concept SHALL be referred as `subscriptionId` as per [Commonalities Event Notification Model](https://github.com/camaraproject/Commonalities/blob/main/documentation/API-design-guidelines.md#122-event-notification).",
            "examples": ["qs15-h556-rt89-1298"]
          },
          "startsAt": {
            "type": "string",
            "format": "date-time",
            "title": "Startsat",
            "description": "Date when the event subscription will begin/began."
          },
          "expiresAt": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time",
                "description": "Date when the event subscription will expire. Only provided when `subscriptionExpireTime` is indicated by API client or Telco Operator has a specific policy about that."
              },
              { "type": "null" }
            ],
            "title": "Expiresat"
          },
          "status": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/SubscriptionStatus",
                "description": "Current status of the subscription - Management of Subscription State engine is not mandatory for now. Note not all statuses may be considered to be implemented. Details:\n  - `ACTIVATION_REQUESTED`: Subscription creation (POST) is triggered but subscription creation process is not finished yet.\n  - `ACTIVE`: Subscription creation process is completed. Subscription is fully operative.\n  - `INACTIVE`: Subscription is temporarily inactive, but its workflow logic is not deleted.\n  - `EXPIRED`: Subscription is ended (no longer active). This status applies when subscription is ended due to `SUBSCRIPTION_EXPIRED` or `ACCESS_TOKEN_EXPIRED` event.\n  - `DELETED`: Subscription is ended as deleted (no longer active). This status applies when subscription information is kept (i.e. subscription workflow is no longer active but its meta-information is kept)."
              },
              { "type": "null" }
            ]
          },
          "protocol": {
            "anyOf": [
              { "type": "string", "const": "MQTT3" },
              { "type": "string", "const": "MQTT5" }
            ],
            "title": "Protocol"
          },
          "protocolSettings": {
            "anyOf": [
              { "$ref": "#/components/schemas/MQTTSettings" },
              { "type": "null" }
            ]
          }
        },
        "type": "object",
        "required": ["sink", "types", "config", "id", "startsAt", "protocol"],
        "title": "MQTTSubscriptionResponse[SubscriptionEventType, CreateSubscriptionDetail]"
      },
      "app__schemas__subscriptions__NATSSubscriptionRequest_SubscriptionEventType_CreateSubscriptionDetail___1": {
        "properties": {
          "sink": {
            "type": "string",
            "title": "Sink",
            "description": "The address to which events shall be delivered using the selected protocol.",
            "examples": ["https://endpoint.example.com/sink"]
          },
          "sinkCredential": {
            "anyOf": [
              { "$ref": "#/components/schemas/SinkCredential" },
              { "type": "null" }
            ]
          },
          "types": {
            "items": {
              "$ref": "#/components/schemas/app__schemas__reachability_status__SubscriptionEventType"
            },
            "type": "array",
            "maxItems": 1,
            "minItems": 1,
            "title": "Types",
            "description": "Camara Event types which are eligible to be delivered by this subscription.\nNote: As of now we enforce to have only event type per subscription."
          },
          "config": {
            "$ref": "#/components/schemas/SubscriptionConfig_CreateSubscriptionDetail_-Input"
          },
          "protocol": {
            "type": "string",
            "const": "NATS",
            "title": "Protocol"
          },
          "protocolSettings": {
            "anyOf": [
              { "$ref": "#/components/schemas/NATSSettings" },
              { "type": "null" }
            ]
          }
        },
        "type": "object",
        "required": ["sink", "types", "config", "protocol"],
        "title": "NATSSubscriptionRequest[SubscriptionEventType, CreateSubscriptionDetail]"
      },
      "app__schemas__subscriptions__NATSSubscriptionRequest_SubscriptionEventType_CreateSubscriptionDetail___2": {
        "properties": {
          "sink": {
            "type": "string",
            "title": "Sink",
            "description": "The address to which events shall be delivered using the selected protocol.",
            "examples": ["https://endpoint.example.com/sink"]
          },
          "sinkCredential": {
            "anyOf": [
              { "$ref": "#/components/schemas/SinkCredential" },
              { "type": "null" }
            ]
          },
          "types": {
            "items": {
              "$ref": "#/components/schemas/app__schemas__roaming_status__SubscriptionEventType"
            },
            "type": "array",
            "maxItems": 1,
            "minItems": 1,
            "title": "Types",
            "description": "Camara Event types which are eligible to be delivered by this subscription.\nNote: As of now we enforce to have only event type per subscription."
          },
          "config": {
            "$ref": "#/components/schemas/SubscriptionConfig_CreateSubscriptionDetail_-Input"
          },
          "protocol": {
            "type": "string",
            "const": "NATS",
            "title": "Protocol"
          },
          "protocolSettings": {
            "anyOf": [
              { "$ref": "#/components/schemas/NATSSettings" },
              { "type": "null" }
            ]
          }
        },
        "type": "object",
        "required": ["sink", "types", "config", "protocol"],
        "title": "NATSSubscriptionRequest[SubscriptionEventType, CreateSubscriptionDetail]"
      },
      "app__schemas__subscriptions__NATSSubscriptionResponse_SubscriptionEventType_CreateSubscriptionDetail___1": {
        "properties": {
          "sink": {
            "type": "string",
            "title": "Sink",
            "description": "The address to which events shall be delivered using the selected protocol.",
            "examples": ["https://endpoint.example.com/sink"]
          },
          "sinkCredential": {
            "anyOf": [
              { "$ref": "#/components/schemas/SinkCredential" },
              { "type": "null" }
            ]
          },
          "types": {
            "items": {
              "$ref": "#/components/schemas/app__schemas__reachability_status__SubscriptionEventType"
            },
            "type": "array",
            "title": "Types",
            "description": "Camara Event types eligible to be delivered by this subscription.\n"
          },
          "config": {
            "$ref": "#/components/schemas/SubscriptionConfig_CreateSubscriptionDetail_-Output"
          },
          "id": {
            "type": "string",
            "title": "Id",
            "description": "The unique identifier of the subscription in the scope of the subscription manager. When this information is contained within an event notification, this concept SHALL be referred as `subscriptionId` as per [Commonalities Event Notification Model](https://github.com/camaraproject/Commonalities/blob/main/documentation/API-design-guidelines.md#122-event-notification).",
            "examples": ["qs15-h556-rt89-1298"]
          },
          "startsAt": {
            "type": "string",
            "format": "date-time",
            "title": "Startsat",
            "description": "Date when the event subscription will begin/began."
          },
          "expiresAt": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time",
                "description": "Date when the event subscription will expire. Only provided when `subscriptionExpireTime` is indicated by API client or Telco Operator has a specific policy about that."
              },
              { "type": "null" }
            ],
            "title": "Expiresat"
          },
          "status": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/SubscriptionStatus",
                "description": "Current status of the subscription - Management of Subscription State engine is not mandatory for now. Note not all statuses may be considered to be implemented. Details:\n  - `ACTIVATION_REQUESTED`: Subscription creation (POST) is triggered but subscription creation process is not finished yet.\n  - `ACTIVE`: Subscription creation process is completed. Subscription is fully operative.\n  - `INACTIVE`: Subscription is temporarily inactive, but its workflow logic is not deleted.\n  - `EXPIRED`: Subscription is ended (no longer active). This status applies when subscription is ended due to `SUBSCRIPTION_EXPIRED` or `ACCESS_TOKEN_EXPIRED` event.\n  - `DELETED`: Subscription is ended as deleted (no longer active). This status applies when subscription information is kept (i.e. subscription workflow is no longer active but its meta-information is kept)."
              },
              { "type": "null" }
            ]
          },
          "protocol": {
            "type": "string",
            "const": "NATS",
            "title": "Protocol"
          },
          "protocolSettings": {
            "anyOf": [
              { "$ref": "#/components/schemas/NATSSettings" },
              { "type": "null" }
            ]
          }
        },
        "type": "object",
        "required": ["sink", "types", "config", "id", "startsAt", "protocol"],
        "title": "NATSSubscriptionResponse[SubscriptionEventType, CreateSubscriptionDetail]"
      },
      "app__schemas__subscriptions__NATSSubscriptionResponse_SubscriptionEventType_CreateSubscriptionDetail___2": {
        "properties": {
          "sink": {
            "type": "string",
            "title": "Sink",
            "description": "The address to which events shall be delivered using the selected protocol.",
            "examples": ["https://endpoint.example.com/sink"]
          },
          "sinkCredential": {
            "anyOf": [
              { "$ref": "#/components/schemas/SinkCredential" },
              { "type": "null" }
            ]
          },
          "types": {
            "items": {
              "$ref": "#/components/schemas/app__schemas__roaming_status__SubscriptionEventType"
            },
            "type": "array",
            "title": "Types",
            "description": "Camara Event types eligible to be delivered by this subscription.\n"
          },
          "config": {
            "$ref": "#/components/schemas/SubscriptionConfig_CreateSubscriptionDetail_-Output"
          },
          "id": {
            "type": "string",
            "title": "Id",
            "description": "The unique identifier of the subscription in the scope of the subscription manager. When this information is contained within an event notification, this concept SHALL be referred as `subscriptionId` as per [Commonalities Event Notification Model](https://github.com/camaraproject/Commonalities/blob/main/documentation/API-design-guidelines.md#122-event-notification).",
            "examples": ["qs15-h556-rt89-1298"]
          },
          "startsAt": {
            "type": "string",
            "format": "date-time",
            "title": "Startsat",
            "description": "Date when the event subscription will begin/began."
          },
          "expiresAt": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time",
                "description": "Date when the event subscription will expire. Only provided when `subscriptionExpireTime` is indicated by API client or Telco Operator has a specific policy about that."
              },
              { "type": "null" }
            ],
            "title": "Expiresat"
          },
          "status": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/SubscriptionStatus",
                "description": "Current status of the subscription - Management of Subscription State engine is not mandatory for now. Note not all statuses may be considered to be implemented. Details:\n  - `ACTIVATION_REQUESTED`: Subscription creation (POST) is triggered but subscription creation process is not finished yet.\n  - `ACTIVE`: Subscription creation process is completed. Subscription is fully operative.\n  - `INACTIVE`: Subscription is temporarily inactive, but its workflow logic is not deleted.\n  - `EXPIRED`: Subscription is ended (no longer active). This status applies when subscription is ended due to `SUBSCRIPTION_EXPIRED` or `ACCESS_TOKEN_EXPIRED` event.\n  - `DELETED`: Subscription is ended as deleted (no longer active). This status applies when subscription information is kept (i.e. subscription workflow is no longer active but its meta-information is kept)."
              },
              { "type": "null" }
            ]
          },
          "protocol": {
            "type": "string",
            "const": "NATS",
            "title": "Protocol"
          },
          "protocolSettings": {
            "anyOf": [
              { "$ref": "#/components/schemas/NATSSettings" },
              { "type": "null" }
            ]
          }
        },
        "type": "object",
        "required": ["sink", "types", "config", "id", "startsAt", "protocol"],
        "title": "NATSSubscriptionResponse[SubscriptionEventType, CreateSubscriptionDetail]"
      },
      "app__schemas__subscriptions__SubscriptionRequest_SubscriptionEventType_CreateSubscriptionDetail___1": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/app__schemas__subscriptions__HTTPSubscriptionRequest_SubscriptionEventType_CreateSubscriptionDetail___1"
          },
          {
            "$ref": "#/components/schemas/app__schemas__subscriptions__MQTTSubscriptionRequest_SubscriptionEventType_CreateSubscriptionDetail___1"
          },
          {
            "$ref": "#/components/schemas/app__schemas__subscriptions__AMQPSubscriptionRequest_SubscriptionEventType_CreateSubscriptionDetail___1"
          },
          {
            "$ref": "#/components/schemas/app__schemas__subscriptions__ApacheKafkaSubscriptionRequest_SubscriptionEventType_CreateSubscriptionDetail___1"
          },
          {
            "$ref": "#/components/schemas/app__schemas__subscriptions__NATSSubscriptionRequest_SubscriptionEventType_CreateSubscriptionDetail___1"
          }
        ],
        "discriminator": {
          "propertyName": "protocol",
          "mapping": {
            "AMQP": "#/components/schemas/app__schemas__subscriptions__AMQPSubscriptionRequest_SubscriptionEventType_CreateSubscriptionDetail___1",
            "HTTP": "#/components/schemas/app__schemas__subscriptions__HTTPSubscriptionRequest_SubscriptionEventType_CreateSubscriptionDetail___1",
            "KAFKA": "#/components/schemas/app__schemas__subscriptions__ApacheKafkaSubscriptionRequest_SubscriptionEventType_CreateSubscriptionDetail___1",
            "MQTT3": "#/components/schemas/app__schemas__subscriptions__MQTTSubscriptionRequest_SubscriptionEventType_CreateSubscriptionDetail___1",
            "MQTT5": "#/components/schemas/app__schemas__subscriptions__MQTTSubscriptionRequest_SubscriptionEventType_CreateSubscriptionDetail___1",
            "NATS": "#/components/schemas/app__schemas__subscriptions__NATSSubscriptionRequest_SubscriptionEventType_CreateSubscriptionDetail___1"
          }
        }
      },
      "app__schemas__subscriptions__SubscriptionRequest_SubscriptionEventType_CreateSubscriptionDetail___2": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/app__schemas__subscriptions__HTTPSubscriptionRequest_SubscriptionEventType_CreateSubscriptionDetail___2"
          },
          {
            "$ref": "#/components/schemas/app__schemas__subscriptions__MQTTSubscriptionRequest_SubscriptionEventType_CreateSubscriptionDetail___2"
          },
          {
            "$ref": "#/components/schemas/app__schemas__subscriptions__AMQPSubscriptionRequest_SubscriptionEventType_CreateSubscriptionDetail___2"
          },
          {
            "$ref": "#/components/schemas/app__schemas__subscriptions__ApacheKafkaSubscriptionRequest_SubscriptionEventType_CreateSubscriptionDetail___2"
          },
          {
            "$ref": "#/components/schemas/app__schemas__subscriptions__NATSSubscriptionRequest_SubscriptionEventType_CreateSubscriptionDetail___2"
          }
        ],
        "discriminator": {
          "propertyName": "protocol",
          "mapping": {
            "AMQP": "#/components/schemas/app__schemas__subscriptions__AMQPSubscriptionRequest_SubscriptionEventType_CreateSubscriptionDetail___2",
            "HTTP": "#/components/schemas/app__schemas__subscriptions__HTTPSubscriptionRequest_SubscriptionEventType_CreateSubscriptionDetail___2",
            "KAFKA": "#/components/schemas/app__schemas__subscriptions__ApacheKafkaSubscriptionRequest_SubscriptionEventType_CreateSubscriptionDetail___2",
            "MQTT3": "#/components/schemas/app__schemas__subscriptions__MQTTSubscriptionRequest_SubscriptionEventType_CreateSubscriptionDetail___2",
            "MQTT5": "#/components/schemas/app__schemas__subscriptions__MQTTSubscriptionRequest_SubscriptionEventType_CreateSubscriptionDetail___2",
            "NATS": "#/components/schemas/app__schemas__subscriptions__NATSSubscriptionRequest_SubscriptionEventType_CreateSubscriptionDetail___2"
          }
        }
      },
      "app__schemas__subscriptions__Subscription_SubscriptionEventType_CreateSubscriptionDetail___1": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/app__schemas__subscriptions__HTTPSubscriptionResponse_SubscriptionEventType_CreateSubscriptionDetail___1"
          },
          {
            "$ref": "#/components/schemas/app__schemas__subscriptions__MQTTSubscriptionResponse_SubscriptionEventType_CreateSubscriptionDetail___1"
          },
          {
            "$ref": "#/components/schemas/app__schemas__subscriptions__AMQPSubscriptionResponse_SubscriptionEventType_CreateSubscriptionDetail___1"
          },
          {
            "$ref": "#/components/schemas/app__schemas__subscriptions__ApacheKafkaSubscriptionResponse_SubscriptionEventType_CreateSubscriptionDetail___1"
          },
          {
            "$ref": "#/components/schemas/app__schemas__subscriptions__NATSSubscriptionResponse_SubscriptionEventType_CreateSubscriptionDetail___1"
          }
        ],
        "discriminator": {
          "propertyName": "protocol",
          "mapping": {
            "AMQP": "#/components/schemas/app__schemas__subscriptions__AMQPSubscriptionResponse_SubscriptionEventType_CreateSubscriptionDetail___1",
            "HTTP": "#/components/schemas/app__schemas__subscriptions__HTTPSubscriptionResponse_SubscriptionEventType_CreateSubscriptionDetail___1",
            "KAFKA": "#/components/schemas/app__schemas__subscriptions__ApacheKafkaSubscriptionResponse_SubscriptionEventType_CreateSubscriptionDetail___1",
            "MQTT3": "#/components/schemas/app__schemas__subscriptions__MQTTSubscriptionResponse_SubscriptionEventType_CreateSubscriptionDetail___1",
            "MQTT5": "#/components/schemas/app__schemas__subscriptions__MQTTSubscriptionResponse_SubscriptionEventType_CreateSubscriptionDetail___1",
            "NATS": "#/components/schemas/app__schemas__subscriptions__NATSSubscriptionResponse_SubscriptionEventType_CreateSubscriptionDetail___1"
          }
        }
      },
      "app__schemas__subscriptions__Subscription_SubscriptionEventType_CreateSubscriptionDetail___2": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/app__schemas__subscriptions__HTTPSubscriptionResponse_SubscriptionEventType_CreateSubscriptionDetail___2"
          },
          {
            "$ref": "#/components/schemas/app__schemas__subscriptions__MQTTSubscriptionResponse_SubscriptionEventType_CreateSubscriptionDetail___2"
          },
          {
            "$ref": "#/components/schemas/app__schemas__subscriptions__AMQPSubscriptionResponse_SubscriptionEventType_CreateSubscriptionDetail___2"
          },
          {
            "$ref": "#/components/schemas/app__schemas__subscriptions__ApacheKafkaSubscriptionResponse_SubscriptionEventType_CreateSubscriptionDetail___2"
          },
          {
            "$ref": "#/components/schemas/app__schemas__subscriptions__NATSSubscriptionResponse_SubscriptionEventType_CreateSubscriptionDetail___2"
          }
        ],
        "discriminator": {
          "propertyName": "protocol",
          "mapping": {
            "AMQP": "#/components/schemas/app__schemas__subscriptions__AMQPSubscriptionResponse_SubscriptionEventType_CreateSubscriptionDetail___2",
            "HTTP": "#/components/schemas/app__schemas__subscriptions__HTTPSubscriptionResponse_SubscriptionEventType_CreateSubscriptionDetail___2",
            "KAFKA": "#/components/schemas/app__schemas__subscriptions__ApacheKafkaSubscriptionResponse_SubscriptionEventType_CreateSubscriptionDetail___2",
            "MQTT3": "#/components/schemas/app__schemas__subscriptions__MQTTSubscriptionResponse_SubscriptionEventType_CreateSubscriptionDetail___2",
            "MQTT5": "#/components/schemas/app__schemas__subscriptions__MQTTSubscriptionResponse_SubscriptionEventType_CreateSubscriptionDetail___2",
            "NATS": "#/components/schemas/app__schemas__subscriptions__NATSSubscriptionResponse_SubscriptionEventType_CreateSubscriptionDetail___2"
          }
        }
      }
    },
    "parameters": {
      "x-correlator": {
        "name": "x-correlator",
        "in": "header",
        "description": "Correlation id for the different services",
        "required": false,
        "schema": {
          "type": "string",
          "pattern": "^[a-zA-Z0-9-]{0,55}$",
          "example": "b4333c46-49c0-4f62-80d7-f0ef930f1c46"
        }
      }
    },
    "headers": {
      "x-correlator": {
        "description": "Correlation id for the different services",
        "schema": {
          "type": "string",
          "pattern": "^[a-zA-Z0-9-]{0,55}$",
          "example": "b4333c46-49c0-4f62-80d7-f0ef930f1c46"
        }
      }
    }
  }
}

